{"version":3,"file":"index.esm.js","sources":["../src/resolvers/DateTime.ts","../src/resolvers/UtcOffset.ts","../src/resolvers/utilities.ts","../src/resolvers/NonPositiveInt.ts","../src/resolvers/PositiveInt.ts","../src/resolvers/NonNegativeInt.ts","../src/resolvers/NegativeInt.ts","../src/resolvers/NonPositiveFloat.ts","../src/resolvers/PositiveFloat.ts","../src/resolvers/NonNegativeFloat.ts","../src/resolvers/NegativeFloat.ts","../src/resolvers/EmailAddress.ts","../src/resolvers/URL.ts","../src/resolvers/PhoneNumber.ts","../src/resolvers/PostalCode.ts","../src/resolvers/BigInt.ts","../src/resolvers/GUID.ts","../src/resolvers/Hexadecimal.ts","../src/resolvers/HexColorCode.ts","../src/resolvers/HSL.ts","../src/resolvers/HSLA.ts","../src/resolvers/IPv4.ts","../src/resolvers/IPv6.ts","../src/resolvers/ISBN.ts","../src/resolvers/MAC.ts","../src/resolvers/Port.ts","../src/resolvers/RGB.ts","../src/resolvers/RGBA.ts","../src/resolvers/USCurrency.ts","../src/resolvers/JSON.ts","../src/resolvers/IBAN.ts","../src/resolvers/ObjectID.ts","../src/resolvers/Void.ts","../src/resolvers/index.ts","../src/mocks.ts","../src/typeDefs.ts","../src/RegularExpression.ts"],"sourcesContent":["import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nexport default new GraphQLScalarType({\n  name: 'DateTime',\n\n  description: 'Use JavaScript Date object for date/time fields.',\n\n  serialize(value) {\n    let v = value;\n\n    if (!(v instanceof Date) && typeof v !== 'string' && typeof v !== 'number') {\n      throw new TypeError(\n        `Value is not an instance of Date, Date string or number: ${JSON.stringify(v)}`,\n      );\n    }\n\n    if (typeof v === 'string') {\n      v = new Date();\n\n      v.setTime(Date.parse(value));\n    } else if (typeof v === 'number') {\n      v = new Date(v);\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (Number.isNaN(v.getTime())) {\n      throw new TypeError(`Value is not a valid Date: ${JSON.stringify(v)}`);\n    }\n\n    return v.toJSON();\n  },\n\n  parseValue(value) {\n    const date = new Date(value);\n\n    // eslint-disable-next-line no-restricted-globals\n    if (Number.isNaN(date.getTime())) {\n      throw new TypeError(`Value is not a valid Date: ${value}`);\n    }\n\n    return date;\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.STRING && ast.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Can only parse strings & integers to dates but got a: ${ast.kind}`,\n      );\n    }\n\n    const result = new Date(ast.kind === Kind.INT ? Number(ast.value) : ast.value);\n\n    // eslint-disable-next-line no-restricted-globals\n    if (Number.isNaN(result.getTime())) {\n      throw new GraphQLError(`Value is not a valid Date: ${ast.value}`);\n    }\n\n    return result;\n  },\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst validate = (value: any) => {\n  const UTC_OFFSET_REGEX = /^([+-]?)(\\d{2}):(\\d{2})$/;\n\n  if (typeof value !== 'string') {\n    throw new TypeError(`Value is not string: ${value}`);\n  }\n\n  if (!UTC_OFFSET_REGEX.test(value)) {\n    throw new TypeError(`Value is not a valid UTC Offset: ${value}`);\n  }\n\n  return value;\n};\n\nexport default new GraphQLScalarType({\n  name: 'UtcOffset',\n\n  description:\n    'A field whose value is a UTC Offset: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones',\n\n  serialize: validate,\n\n  parseValue: validate,\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `Can only validate strings as UTC Offset but got a: ${ast.kind}`,\n      );\n    }\n\n    return validate(ast.value);\n  },\n});\n","enum VALUE_RANGES {\n  NEGATIVE,\n  NON_NEGATIVE,\n  POSITIVE,\n  NON_POSITIVE,\n}\n\nenum VALUE_TYPES {\n  INT,\n  FLOAT,\n}\n\nconst VALIDATIONS = {\n  NonPositiveInt: {\n    range: VALUE_RANGES.NON_POSITIVE,\n    type: VALUE_TYPES.INT,\n  },\n  PositiveInt: {\n    range: VALUE_RANGES.POSITIVE,\n    type: VALUE_TYPES.INT,\n  },\n  NonNegativeInt: {\n    range: VALUE_RANGES.NON_NEGATIVE,\n    type: VALUE_TYPES.INT,\n  },\n  NegativeInt: {\n    range: VALUE_RANGES.NEGATIVE,\n    type: VALUE_TYPES.INT,\n  },\n\n  NonPositiveFloat: {\n    range: VALUE_RANGES.NON_POSITIVE,\n    type: VALUE_TYPES.FLOAT,\n  },\n  PositiveFloat: {\n    range: VALUE_RANGES.POSITIVE,\n    type: VALUE_TYPES.FLOAT,\n  },\n  NonNegativeFloat: {\n    range: VALUE_RANGES.NON_NEGATIVE,\n    type: VALUE_TYPES.FLOAT,\n  },\n  NegativeFloat: {\n    range: VALUE_RANGES.NEGATIVE,\n    type: VALUE_TYPES.FLOAT,\n  },\n};\n\n// TODO: Consider implementing coercion like this...\n// See: https://github.com/graphql/graphql-js/blob/master/src/type/scalars.js#L13\n// See: https://github.com/graphql/graphql-js/blob/master/src/type/scalars.js#L60\n\nfunction _validateInt(value: any) {\n  if (!Number.isFinite(value)) {\n    throw new TypeError(`Value is not a finite number: ${value}`);\n  }\n\n  if (!Number.isInteger(value)) {\n    throw new TypeError(`Value is not an integer: ${value}`);\n  }\n\n  if (!Number.isSafeInteger(value)) {\n    throw new TypeError(`Value is not a safe integer: ${value}`);\n  }\n}\n\nfunction _validateFloat(value: any) {\n  if (!Number.isFinite(value)) {\n    throw new TypeError(`Value is not a finite number: ${value}`);\n  }\n}\n\nfunction processValue(value: any, validation: { range: VALUE_RANGES, type: VALUE_TYPES}) {\n  const { range, type } = validation;\n\n  /* eslint-disable no-restricted-globals */\n  if (\n    value === null ||\n    typeof value === 'undefined' ||\n    isNaN(value) ||\n    Number.isNaN(value) ||\n    value === Number.NaN\n  ) {\n    throw new TypeError(`Value is not a number: ${value}`);\n  }\n  /* eslint-enable */\n\n  let parsedValue;\n\n  switch (type) {\n    case VALUE_TYPES.FLOAT:\n      parsedValue = parseFloat(value);\n      _validateFloat(parsedValue);\n      break;\n\n    case VALUE_TYPES.INT:\n      parsedValue = parseInt(value, 10);\n      _validateInt(parsedValue);\n      break;\n\n    default:\n    // no -op, return undefined\n  }\n\n  if (\n    (range === VALUE_RANGES.NEGATIVE && !(parsedValue < 0)) ||\n    (range === VALUE_RANGES.NON_NEGATIVE && !(parsedValue >= 0)) ||\n    (range === VALUE_RANGES.POSITIVE && !(parsedValue > 0)) ||\n    (range === VALUE_RANGES.NON_POSITIVE && !(parsedValue <= 0))\n  ) {\n    throw new TypeError(\n      `Value is not a ${VALUE_RANGES[range]\n        .toLowerCase()\n        .replace('_', '-')} number: ${value}`,\n    );\n  }\n\n  return parsedValue;\n}\n\nexport { processValue, VALIDATIONS };\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\nimport { processValue, VALIDATIONS } from './utilities';\n\nexport default new GraphQLScalarType({\n  name: 'NonPositiveInt',\n\n  description: 'Integers that will have a value of 0 or less.',\n\n  serialize(value) {\n    return processValue(value, VALIDATIONS.NonPositiveInt);\n  },\n\n  parseValue(value) {\n    return processValue(value, VALIDATIONS.NonPositiveInt);\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Can only validate integers as non-positive integers but got a: ${\n          ast.kind\n        }`,\n      );\n    }\n\n    return processValue(ast.value, VALIDATIONS.NonPositiveInt);\n  },\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\nimport { processValue, VALIDATIONS } from './utilities';\n\nexport default new GraphQLScalarType({\n  name: 'PositiveInt',\n\n  description: 'Integers that will have a value greater than 0.',\n\n  serialize(value) {\n    return processValue(value, VALIDATIONS.PositiveInt);\n  },\n\n  parseValue(value) {\n    return processValue(value, VALIDATIONS.PositiveInt);\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Can only validate integers as positive integers but got a: ${\n          ast.kind\n        }`,\n      );\n    }\n\n    return processValue(ast.value, VALIDATIONS.PositiveInt);\n  },\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\nimport { processValue, VALIDATIONS } from './utilities';\n\nexport default function (name = 'NonNegativeInt') {\n  return new GraphQLScalarType({\n    name,\n\n    description: 'Integers that will have a value of 0 or more.',\n\n    serialize(value) {\n      return processValue(value, VALIDATIONS.NonNegativeInt);\n    },\n\n    parseValue(value) {\n      return processValue(value, VALIDATIONS.NonNegativeInt);\n    },\n\n    parseLiteral(ast) {\n      if (ast.kind !== Kind.INT) {\n        throw new GraphQLError(\n          `Can only validate integers as non-negative integers but got a: ${\n          ast.kind\n          }`,\n        );\n      }\n\n      return processValue(ast.value, VALIDATIONS.NonNegativeInt);\n    },\n  });\n}\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\nimport { processValue, VALIDATIONS } from './utilities';\n\nexport default new GraphQLScalarType({\n  name: 'NegativeInt',\n\n  description: 'Integers that will have a value less than 0.',\n\n  serialize(value) {\n    return processValue(value, VALIDATIONS.NegativeInt);\n  },\n\n  parseValue(value) {\n    return processValue(value, VALIDATIONS.NegativeInt);\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Can only validate integers as negative integers but got a: ${\n          ast.kind\n        }`,\n      );\n    }\n\n    return processValue(ast.value, VALIDATIONS.NegativeInt);\n  },\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\nimport { processValue, VALIDATIONS } from './utilities';\n\nexport default new GraphQLScalarType({\n  name: 'NonPositiveFloat',\n\n  description: 'Floats that will have a value of 0 or less.',\n\n  serialize(value) {\n    return processValue(value, VALIDATIONS.NonPositiveFloat);\n  },\n\n  parseValue(value) {\n    return processValue(value, VALIDATIONS.NonPositiveFloat);\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.FLOAT && ast.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Can only validate floating point numbers as non-positive floating point numbers but got a: ${\n          ast.kind\n        }`,\n      );\n    }\n\n    return processValue(ast.value, VALIDATIONS.NonPositiveFloat);\n  },\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\nimport { processValue, VALIDATIONS } from './utilities';\n\nexport default new GraphQLScalarType({\n  name: 'PositiveFloat',\n\n  description: 'Floats that will have a value greater than 0.',\n\n  serialize(value) {\n    return processValue(value, VALIDATIONS.PositiveFloat);\n  },\n\n  parseValue(value) {\n    return processValue(value, VALIDATIONS.PositiveFloat);\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.FLOAT && ast.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Can only validate floating point numbers as positive floating point numbers but got a: ${\n          ast.kind\n        }`,\n      );\n    }\n\n    return processValue(ast.value, VALIDATIONS.PositiveFloat);\n  },\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\nimport { processValue, VALIDATIONS } from './utilities';\n\nexport default function (name = 'NonNegativeFloat') {\n  return new GraphQLScalarType({\n    name,\n\n    description: 'Floats that will have a value of 0 or more.',\n\n    serialize(value) {\n      return processValue(value, VALIDATIONS.NonNegativeFloat);\n    },\n\n    parseValue(value) {\n      return processValue(value, VALIDATIONS.NonNegativeFloat);\n    },\n\n    parseLiteral(ast) {\n      if (ast.kind !== Kind.FLOAT && ast.kind !== Kind.INT) {\n        throw new GraphQLError(\n          `Can only validate floating point numbers as non-negative floating point numbers but got a: ${\n          ast.kind\n          }`,\n        );\n      }\n\n      return processValue(ast.value, VALIDATIONS.NonNegativeFloat);\n    },\n  });\n}\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\nimport { processValue, VALIDATIONS } from './utilities';\n\nexport default new GraphQLScalarType({\n  name: 'NegativeFloat',\n\n  description: 'Floats that will have a value less than 0.',\n\n  serialize(value) {\n    return processValue(value, VALIDATIONS.NegativeFloat);\n  },\n\n  parseValue(value) {\n    return processValue(value, VALIDATIONS.NegativeFloat);\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.FLOAT && ast.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Can only validate floating point numbers as negative floating point numbers but got a: ${\n          ast.kind\n        }`,\n      );\n    }\n\n    return processValue(ast.value, VALIDATIONS.NegativeFloat);\n  },\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst validate = (value: any) => {\n  const EMAIL_ADDRESS_REGEX = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n\n  if (typeof value !== 'string') {\n    throw new TypeError(`Value is not string: ${value}`);\n  }\n\n  if (!EMAIL_ADDRESS_REGEX.test(value)) {\n    throw new TypeError(`Value is not a valid email address: ${value}`);\n  }\n\n  return value;\n};\n\nexport default new GraphQLScalarType({\n  name: 'EmailAddress',\n\n  description:\n    'A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.',\n\n  serialize: validate,\n\n  parseValue: validate,\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `Can only validate strings as email addresses but got a: ${ast.kind}`,\n      );\n    }\n\n    return validate(ast.value);\n  },\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nexport default new GraphQLScalarType({\n  name: 'URL',\n\n  description:\n    'A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.',\n\n  serialize(value) {\n    return new URL(value.toString()).toString();\n  },\n\n  parseValue: value => new URL(value.toString()),\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `Can only validate strings as URLs but got a: ${ast.kind}`,\n      );\n    }\n\n    return new URL(ast.value.toString());\n  },\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst PHONE_NUMBER_REGEX = /^\\+[1-9]\\d{1,14}$/;\n\nexport default new GraphQLScalarType({\n  name: 'PhoneNumber',\n\n  description:\n    'A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.',\n\n  serialize(value) {\n    if (typeof value !== 'string') {\n      throw new TypeError(`Value is not string: ${value}`);\n    }\n\n    if (!(PHONE_NUMBER_REGEX.test(value))) {\n      throw new TypeError(`Value is not a valid phone number of the form +17895551234 (10-15 digits): ${value}`);\n    }\n\n    return value;\n  },\n\n  parseValue(value) {\n    if (typeof value !== 'string') {\n      throw new TypeError(`Value is not string: ${value}`);\n    }\n\n    if (!(PHONE_NUMBER_REGEX.test(value))) {\n      throw new TypeError(`Value is not a valid phone number of the form +17895551234 (10-15 digits): ${value}`);\n    }\n\n    return value;\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `Can only validate strings as phone numbers but got a: ${ast.kind}`,\n      );\n    }\n\n    if (!(PHONE_NUMBER_REGEX.test(ast.value))) {\n      throw new TypeError(`Value is not a valid phone number of the form +17895551234 (10-15 digits): ${ast.value}`);\n    }\n\n    return ast.value;\n  },\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\n// We're going to start with a limited set as suggested here:\n// http://www.pixelenvision.com/1708/zip-postal-code-validation-regex-php-code-for-12-countries/\n// and here:\n// https://stackoverflow.com/questions/578406/what-is-the-ultimate-postal-code-and-zip-regex\n//\n// Which gives us the following countries:\n//\n// US - United States\n// UK - United Kingdom\n// DE - Germany\n// CA - Canada\n// FR - France\n// IT - Italy\n// AU - Australia\n// NL - Netherlands\n// ES - Spain\n// DK - Denmark\n// SE - Sweden\n// BE - Belgium\n// IN - India\n// AT - Austria\n// PT - Portugal\n// CH - Switzerland\n// LU - Luxembourg\n//\n// This is really a practical decision of weight (of the package) vs. completeness.\n//\n// In the future we might expand this list and use the more comprehensive list found here:\n// http://unicode.org/cldr/trac/browser/tags/release-26-0-1/common/supplemental/postalCodeData.xml\n\n// prettier-ignore\nconst POSTAL_CODE_REGEXES = [\n  /* US */ new RegExp(/^\\d{5}([-]?\\d{4})?$/),\n  /* UK */ new RegExp(/^(GIR|[A-Z]\\d[A-Z\\d]??|[A-Z]{2}\\d[A-Z\\d]??)[ ]??(\\d[A-Z]{2})$/),\n  /* DE */ new RegExp(/\\b((?:0[1-46-9]\\d{3})|(?:[1-357-9]\\d{4})|(?:[4][0-24-9]\\d{3})|(?:[6][013-9]\\d{3}))\\b/),\n  /* CA */ new RegExp(/^([ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJKLMNPRSTVWXYZ]) {0,1}(\\d[ABCEGHJKLMNPRSTVWXYZ]\\d)$/),\n  /* FR */ new RegExp(/^(F-)?((2[A|B])|[0-9]{2})[0-9]{3}$/),\n  /* IT */ new RegExp(/^(V-|I-)?[0-9]{5}$/),\n  /* AU */ new RegExp(/^(0[289][0-9]{2})|([1345689][0-9]{3})|(2[0-8][0-9]{2})|(290[0-9])|(291[0-4])|(7[0-4][0-9]{2})|(7[8-9][0-9]{2})$/),\n  /* NL */ new RegExp(/^[1-9][0-9]{3}\\s?([a-zA-Z]{2})?$/),\n  /* ES */ new RegExp(/^([1-9]{2}|[0-9][1-9]|[1-9][0-9])[0-9]{3}$/),\n  /* DK */ new RegExp(/^([D|d][K|k]( |-))?[1-9]{1}[0-9]{3}$/),\n  /* SE */ new RegExp(/^(s-|S-){0,1}[0-9]{3}\\s?[0-9]{2}$/),\n  /* BE */ new RegExp(/^[1-9]{1}[0-9]{3}$/),\n  /* IN */ new RegExp(/^\\d{6}$/),\n  /* AT */ new RegExp(/^\\d{4}$/),\n  /* PT */ new RegExp(/^\\d{4}([\\-]\\d{3})?$/),\n  /* CH */ new RegExp(/^\\d{4}$/),\n  /* LU */ new RegExp(/^\\d{4}$/),\n];\n\nfunction _testPostalCode(postalCode: string) {\n  let result = false;\n\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < POSTAL_CODE_REGEXES.length; i++) {\n    const regex = POSTAL_CODE_REGEXES[i];\n\n    if (regex.test(postalCode)) {\n      result = true;\n      break;\n    }\n  }\n\n  return result;\n}\n\nexport default new GraphQLScalarType({\n  name: 'PostalCode',\n\n  description:\n    'A field whose value conforms to the standard postal code formats for United States, United Kingdom, Germany, Canada, France, Italy, Australia, Netherlands, Spain, Denmark, Sweden, Belgium, India, Austria, Portugal, Switzerland or Luxembourg.',\n\n  serialize(value) {\n    if (typeof value !== 'string') {\n      throw new TypeError(`Value is not string: ${value}`);\n    }\n\n    if (!_testPostalCode(value)) {\n      throw new TypeError(`Value is not a valid postal code: ${value}`);\n    }\n\n    return value;\n  },\n\n  parseValue(value) {\n    if (typeof value !== 'string') {\n      throw new TypeError(`Value is not string: ${value}`);\n    }\n\n    if (!_testPostalCode(value)) {\n      throw new TypeError(`Value is not a valid postal code: ${value}`);\n    }\n\n    return value;\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `Can only validate strings as postal codes but got a: ${ast.kind}`,\n      );\n    }\n\n    if (!_testPostalCode(ast.value)) {\n      throw new TypeError(`Value is not a valid postal code: ${ast.value}`);\n    }\n\n    return ast.value;\n  },\n});\n","// Based on https://github.com/stems/graphql-bigint/\n\nimport { Kind, GraphQLScalarType } from 'graphql';\n\ndeclare global {\n  interface BigInt {\n    toJSON(): string;\n  }\n}\n\nexport default function (name = 'BigInt') {\n  BigInt.prototype.toJSON =\n    BigInt.prototype.toJSON ||\n    function (this: bigint) {\n      return this.toString();\n    };\n  return new GraphQLScalarType({\n    name,\n    description:\n      'The `BigInt` scalar type represents non-fractional signed whole numeric values.',\n    serialize: BigInt,\n    parseValue: BigInt,\n    parseLiteral(ast) {\n      if (\n        ast.kind === Kind.INT ||\n        ast.kind === Kind.FLOAT ||\n        ast.kind === Kind.STRING\n      ) {\n        return BigInt(ast.value);\n      }\n      return null;\n    },\n  });\n}\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst validate = (value: any) => {\n  const GUID_REGEX = /^(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}$/gi;\n\n  if (typeof value !== 'string') {\n    throw new TypeError(`Value is not string: ${value}`);\n  }\n\n  if (value.startsWith('{')) {\n    value = value.substring(1, value.length - 1);\n  }\n\n  if (!GUID_REGEX.test(value)) {\n    throw new TypeError(`Value is not a valid GUID: ${value}`);\n  }\n\n  return value;\n};\n\nexport default new GraphQLScalarType({\n  name: `GUID`,\n\n  description: `A field whose value is a generic Globally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.`,\n\n  serialize(value) {\n    return validate(value);\n  },\n\n  parseValue(value) {\n    return validate(value);\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `Can only validate strings as GUIDs but got a: ${ast.kind}`,\n      );\n    }\n\n    return validate(ast.value);\n  },\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst validate = (value: any) => {\n  const HEXADECIMAL_REGEX = /^[a-f0-9]+$/i;\n\n  if (typeof value !== 'string') {\n    throw new TypeError(`Value is not string: ${value}`);\n  }\n\n  if (!HEXADECIMAL_REGEX.test(value)) {\n    throw new TypeError(`Value is not a valid hexadecimal value: ${value}`);\n  }\n\n  return value;\n};\n\nexport default new GraphQLScalarType({\n  name: `Hexadecimal`,\n\n  description: `A field whose value is a hexadecimal: https://en.wikipedia.org/wiki/Hexadecimal.`,\n\n  serialize(value) {\n    return validate(value);\n  },\n\n  parseValue(value) {\n    return validate(value);\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `Can only validate strings as a hexadecimal but got a: ${ast.kind}`,\n      );\n    }\n\n    return validate(ast.value);\n  },\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst HEX_COLOR_CODE = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3}|[A-Fa-f0-9]{8})$/;\n\nconst validate = (value: any) => {\n    if (typeof value !== 'string') {\n        throw new TypeError(`Value is not string: ${value}`);\n    }\n\n    if (!(HEX_COLOR_CODE.test(value))) {\n        throw new TypeError(`Value is not a valid HexColorCode: ${value}`);\n    }\n\n    return value;\n};\n\nexport default new GraphQLScalarType({\n    name: `HexColorCode`,\n\n    description: `A field whose value is a hex color code: https://en.wikipedia.org/wiki/Web_colors.`,\n\n    serialize(value) {\n        return validate(value);\n    },\n\n    parseValue(value) {\n        return validate(value);\n    },\n\n    parseLiteral(ast) {\n        if (ast.kind !== Kind.STRING) {\n            throw new GraphQLError(`Can only validate strings as hex color codes but got a: ${ast.kind}`);\n        }\n\n        return validate(ast.value);\n    }\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst validate = (value: any) => {\n  const HSL_REGEX = /^hsl\\(\\s*(-?\\d+|-?\\d*.\\d+)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*\\)$/;\n\n  if (typeof value !== 'string') {\n    throw new TypeError(`Value is not string: ${value}`);\n  }\n\n  if (!HSL_REGEX.test(value)) {\n    throw new TypeError(`Value is not a valid HSL color: ${value}`);\n  }\n\n  return value;\n};\n\nexport default new GraphQLScalarType({\n  name: `HSL`,\n\n  description: `A field whose value is a CSS HSL color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla().`,\n\n  serialize(value) {\n    return validate(value);\n  },\n\n  parseValue(value) {\n    return validate(value);\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `Can only validate strings as HSL colors but got a: ${ast.kind}`,\n      );\n    }\n\n    return validate(ast.value);\n  },\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst HSLA_REGEX = /^hsla\\(\\s*(-?\\d+|-?\\d*.\\d+)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)\\s*\\)$/;\n\nconst validate = (value: any) => {\n    if (typeof value !== 'string') {\n        throw new TypeError(`Value is not string: ${value}`);\n    }\n\n    if (!(HSLA_REGEX.test(value))) {\n        throw new TypeError(`Value is not a valid HSLA color: ${value}`);\n    }\n\n    return value;\n};\n\nexport default new GraphQLScalarType({\n    name: `HSLA`,\n\n    description: `A field whose value is a CSS HSLA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla().`,\n\n    serialize(value) {\n        return validate(value);\n    },\n\n    parseValue(value) {\n        return validate(value);\n    },\n\n    parseLiteral(ast) {\n        if (ast.kind !== Kind.STRING) {\n            throw new GraphQLError(`Can only validate strings as HSLA colors but got a: ${ast.kind}`);\n        }\n\n        return validate(ast.value);\n    }\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst IPV4_REGEX = /^(?:(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\/(?:[0-9]|[1-2][0-9]|3[0-2]))?)$/;\n\nconst validate = (value: any) => {\n    if (typeof value !== 'string') {\n        throw new TypeError(`Value is not string: ${value}`);\n    }\n\n    if (!(IPV4_REGEX.test(value))) {\n        throw new TypeError(`Value is not a valid IPv4 address: ${value}`);\n    }\n\n    return value;\n};\n\nexport default new GraphQLScalarType({\n    name: `IPv4`,\n\n    description: `A field whose value is a IPv4 address: https://en.wikipedia.org/wiki/IPv4.`,\n\n    serialize(value) {\n        return validate(value);\n    },\n\n    parseValue(value) {\n        return validate(value);\n    },\n\n    parseLiteral(ast) {\n        if (ast.kind !== Kind.STRING) {\n            throw new GraphQLError(`Can only validate strings as IPv4 addresses but got a: ${ast.kind}`);\n        }\n\n        return validate(ast.value);\n    }\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst IPV6_REGEX = /^(?:(?:(?:[0-9A-Fa-f]{1,4}:){6}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|::(?:[0-9A-Fa-f]{1,4}:){5}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,1}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})?::)(?:\\/(?:0?0?[0-9]|0?[1-9][0-9]|1[01][0-9]|12[0-8]))?)$/;\nconst validate = (value: any) => {\n    if (typeof value !== 'string') {\n        throw new TypeError(`Value is not string: ${value}`);\n    }\n\n    if (!(IPV6_REGEX.test(value))) {\n        throw new TypeError(`Value is not a valid IPv6 address: ${value}`);\n    }\n\n    return value;\n};\n\nexport default new GraphQLScalarType({\n    name: `IPv6`,\n\n    description: `A field whose value is a IPv6 address: https://en.wikipedia.org/wiki/IPv6.`,\n\n    serialize(value) {\n        return validate(value);\n    },\n\n    parseValue(value) {\n        return validate(value);\n    },\n\n    parseLiteral(ast) {\n        if (ast.kind !== Kind.STRING) {\n            throw new GraphQLError(`Can only validate strings as IPv6 addresses but got a: ${ast.kind}`);\n        }\n\n        return validate(ast.value);\n    }\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst ISBN_REGEX_ARR = [\n    /^(?:ISBN(?:-10)?:? *)?((?=\\d{1,5}([ -]?)\\d{1,7}\\2?\\d{1,6}\\2?\\d)(?:\\d\\2*){9}[\\dX])$/i,\n    /^(?:ISBN(?:-13)?:? *)?(97(?:8|9)([ -]?)(?=\\d{1,5}\\2?\\d{1,7}\\2?\\d{1,6}\\2?\\d)(?:\\d\\2*){9}\\d)$/i\n];\n\nconst validate = (value: any) => {\n    if (typeof value !== 'string') {\n        throw new TypeError(`Value is not string: ${value}`);\n    }\n\n    let valid = false;\n    for (const regex of ISBN_REGEX_ARR) {\n        if (regex.test(value)) {\n            valid = true;\n            break;\n        }\n    }\n\n    if (!valid) {\n        throw new TypeError(`Value is not a valid ISBN number: ${value}`);\n    }\n\n    return value;\n};\n\nexport default new GraphQLScalarType({\n    name: `ISBN`,\n\n    description: `A field whose value is a ISBN-10 or ISBN-13 number: https://en.wikipedia.org/wiki/International_Standard_Book_Number.`,\n\n    serialize(value) {\n        return validate(value);\n    },\n\n    parseValue(value) {\n        return validate(value);\n    },\n\n    parseLiteral(ast) {\n        if (ast.kind !== Kind.STRING) {\n            throw new GraphQLError(`Can only validate strings as ISBN numbers but got a: ${ast.kind}`);\n        }\n\n        return validate(ast.value);\n    }\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst MAC_REGEX = /^(?:[0-9A-Fa-f]{2}([:-]?)[0-9A-Fa-f]{2})(?:(?:\\1|\\.)(?:[0-9A-Fa-f]{2}([:-]?)[0-9A-Fa-f]{2})){2}$/;\n\nconst validate = (value: any) => {\n    if (typeof value !== 'string') {\n        throw new TypeError(`Value is not string: ${value}`);\n    }\n\n    if (!(MAC_REGEX.test(value))) {\n        throw new TypeError(`Value is not a valid MAC address: ${value}`);\n    }\n\n    return value;\n};\n\nexport default new GraphQLScalarType({\n    name: `MAC`,\n\n    description: `A field whose value is a IEEE 802 48-bit MAC address: https://en.wikipedia.org/wiki/MAC_address.`,\n\n    serialize(value) {\n        return validate(value);\n    },\n\n    parseValue(value) {\n        return validate(value);\n    },\n\n    parseLiteral(ast) {\n        if (ast.kind !== Kind.STRING) {\n            throw new GraphQLError(`Can only validate strings as MAC addresses but got a: ${ast.kind}`);\n        }\n\n        return validate(ast.value);\n    }\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst validate = (value: any) => {\n\n    const parsed = typeof value === 'string' ? parseInt(value, 10) : value;\n\n    if (typeof parsed !== 'number' || Number.isNaN(parsed)) {\n        throw new TypeError(`Value is not a number: ${value}`);\n    }\n\n    if (parsed === Infinity || parsed === -Infinity) {\n        throw new TypeError(`Value is not a finite number: ${value}`);\n    }\n\n    if (parsed <= 0 || parsed > 65535) {\n        throw new TypeError(`Value is not a valid TCP port: ${value}`);\n    }\n\n    return parsed;\n};\n\nexport default new GraphQLScalarType({\n    name: `Port`,\n\n    description: `A field whose value is a valid TCP port within the range of 0 to 65535: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_ports`,\n\n    serialize(value) {\n        return validate(value);\n    },\n\n    parseValue(value) {\n        return validate(value);\n    },\n\n    parseLiteral(ast) {\n        if (ast.kind !== Kind.INT) {\n            throw new GraphQLError(`Can only validate integers as TCP ports but got a: ${ast.kind}`);\n        }\n\n        return validate(ast.value);\n    }\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst RGB_REGEX = /^rgb\\(\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(%?)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*\\)$/;\n\nconst validate = (value: any) => {\n    if (typeof value !== 'string') {\n        throw new TypeError(`Value is not string: ${value}`);\n    }\n\n    if (!(RGB_REGEX.test(value))) {\n        throw new TypeError(`Value is not a valid RGB color: ${value}`);\n    }\n\n    return value;\n};\n\nexport default new GraphQLScalarType({\n    name: `RGB`,\n\n    description: `A field whose value is a CSS RGB color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba().`,\n\n    serialize(value) {\n        return validate(value);\n    },\n\n    parseValue(value) {\n        return validate(value);\n    },\n\n    parseLiteral(ast) {\n        if (ast.kind !== Kind.STRING) {\n            throw new GraphQLError(`Can only validate strings as RGB colors but got a: ${ast.kind}`);\n        }\n\n        return validate(ast.value);\n    }\n});\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst RGBA_REGEX = /^rgba\\(\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(%?)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)\\s*\\)$/;\n\nconst validate = (value: any) => {\n    if (typeof value !== 'string') {\n        throw new TypeError(`Value is not string: ${value}`);\n    }\n\n    if (!(RGBA_REGEX.test(value))) {\n        throw new TypeError(`Value is not a valid RGBA color: ${value}`);\n    }\n\n    return value;\n};\n\nexport default new GraphQLScalarType({\n    name: `RGBA`,\n\n    description: `A field whose value is a CSS RGBA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba().`,\n\n    serialize(value) {\n        return validate(value);\n    },\n\n    parseValue(value) {\n        return validate(value);\n    },\n\n    parseLiteral(ast) {\n        if (ast.kind !== Kind.STRING) {\n            throw new GraphQLError(`Can only validate strings as RGBA colors but got a: ${ast.kind}`);\n        }\n\n        return validate(ast.value);\n    }\n});\n","// https://github.com/abhiaiyer91/graphql-currency-scalars\nimport { Kind, GraphQLScalarType } from 'graphql';\n\nfunction generateCurrency(value: any) {\n  if (typeof value !== 'number') {\n    throw new TypeError(\n      `Currency cannot represent non integer type ${JSON.stringify(value)}`\n    );\n  }\n\n  const currencyInCents = parseInt(value.toString(), 10);\n\n  return (currencyInCents / 100).toLocaleString('en-US', { style: 'currency', currency: 'USD' });\n}\n\nfunction generateCents(value: string) {\n  const digits = value.replace('$', '').replace(',', '');\n  const number = parseFloat(digits);\n  return number * 100;\n}\n\n/**\n * An Currency Scalar.\n *\n * Input:\n *    This scalar takes a currency string as input and\n *    formats it to currency in cents.\n *\n * Output:\n *    This scalar serializes currency in cents to\n *    currency strings.\n */\n\nexport default new GraphQLScalarType({\n  name: 'USCurrency',\n  description: 'A currency string, such as $21.25',\n  serialize: generateCurrency,\n  parseValue(value) {\n    if (typeof value !== 'string') {\n      throw new TypeError(\n        `Currency cannot represent non string type ${JSON.stringify(value)}`\n      );\n    }\n\n    return generateCents(value);\n  },\n  parseLiteral(ast) {\n    if (ast.kind === Kind.STRING) {\n      if (typeof ast.value === 'string') {\n        return generateCents(ast.value);\n      }\n    }\n    throw new TypeError(\n      `Currency cannot represent an invalid currency-string ${JSON.stringify(ast)}.`\n    );\n  },\n});\n","import { Kind, GraphQLScalarType, ValueNode, ObjectValueNode } from 'graphql';\n\nfunction identity<T>(value: T): T {\n  return value;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction ensureObject(value: any): value is object {\n  if (typeof value !== 'object' || value === null || Array.isArray(value)) {\n    throw new TypeError(\n      `JSONObject cannot represent non-object value: ${value}`,\n    );\n  }\n\n  return value;\n}\n\nfunction parseObject(ast: ObjectValueNode, variables: any): any {\n  const value = Object.create(null);\n  ast.fields.forEach((field) => {\n    // eslint-disable-next-line no-use-before-define\n    value[field.name.value] = parseLiteral(field.value, variables);\n  });\n\n  return value;\n}\n\nfunction parseLiteral(ast: ValueNode, variables: any): any {\n  switch (ast.kind) {\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n      return ast.value;\n    case Kind.INT:\n    case Kind.FLOAT:\n      return parseFloat(ast.value);\n    case Kind.OBJECT:\n      return parseObject(ast, variables);\n    case Kind.LIST:\n      return ast.values.map((n) => parseLiteral(n, variables));\n    case Kind.NULL:\n      return null;\n    case Kind.VARIABLE: {\n      const name = ast.name.value;\n      return variables ? variables[name] : undefined;\n    }\n  }\n}\n\n// This named export is intended for users of CommonJS. Users of ES modules\n// should instead use the default export.\nexport const JSON = new GraphQLScalarType({\n  name: 'JSON',\n  description:\n    'The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).',\n  serialize: identity,\n  parseValue: identity,\n  parseLiteral,\n});\n\nexport const JSONObject = new GraphQLScalarType({\n  name: 'JSONObject',\n  description:\n    'The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).',\n  serialize: ensureObject,\n  parseValue: ensureObject,\n  parseLiteral: parseObject,\n});\n","// Based on https://github.com/arhs/iban.js\n\nimport { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\ninterface CountryStructure {\n  [key: string]: Specification;\n}\n\ninterface Specification {\n  length: number;\n  structure: string;\n  example: string;\n}\n\n/* These are IBAN the specifications for all countries using IBAN\nThe key is the countrycode, the second item is the length of the IBAN,\nThe third item is the structure of the underlying BBAN (for validation and formatting)\n*/\nconst IBAN_SPECIFICATIONS: CountryStructure = {\n  AD: {\n    length: 24,\n    structure: 'F04F04A12',\n    example: 'AD1200012030200359100100',\n  },\n  AE: { length: 23, structure: 'F03F16', example: 'AE070331234567890123456' },\n  AL: {\n    length: 28,\n    structure: 'F08A16',\n    example: 'AL47212110090000000235698741',\n  },\n  AO: { length: 25, structure: 'F21', example: 'AO69123456789012345678901' },\n  AT: { length: 20, structure: 'F05F11', example: 'AT611904300234573201' },\n  AZ: {\n    length: 28,\n    structure: 'U04A20',\n    example: 'AZ21NABZ00000000137010001944',\n  },\n  BA: {\n    length: 20,\n    structure: 'F03F03F08F02',\n    example: 'BA391290079401028494',\n  },\n  BE: { length: 16, structure: 'F03F07F02', example: 'BE68539007547034' },\n  BF: { length: 27, structure: 'F23', example: 'BF2312345678901234567890123' },\n  BG: {\n    length: 22,\n    structure: 'U04F04F02A08',\n    example: 'BG80BNBG96611020345678',\n  },\n  BH: { length: 22, structure: 'U04A14', example: 'BH67BMAG00001299123456' },\n  BI: { length: 16, structure: 'F12', example: 'BI41123456789012' },\n  BJ: { length: 28, structure: 'F24', example: 'BJ39123456789012345678901234' },\n  BR: {\n    length: 29,\n    structure: 'F08F05F10U01A01',\n    example: 'BR9700360305000010009795493P1',\n  },\n  BY: {\n    length: 28,\n    structure: 'A04F04A16',\n    example: 'BY13NBRB3600900000002Z00AB00',\n  },\n  CH: { length: 21, structure: 'F05A12', example: 'CH9300762011623852957' },\n  CI: {\n    length: 28,\n    structure: 'U02F22',\n    example: 'CI70CI1234567890123456789012',\n  },\n  CM: { length: 27, structure: 'F23', example: 'CM9012345678901234567890123' },\n  CR: { length: 22, structure: 'F04F14', example: 'CR72012300000171549015' },\n  CV: { length: 25, structure: 'F21', example: 'CV30123456789012345678901' },\n  CY: {\n    length: 28,\n    structure: 'F03F05A16',\n    example: 'CY17002001280000001200527600',\n  },\n  CZ: {\n    length: 24,\n    structure: 'F04F06F10',\n    example: 'CZ6508000000192000145399',\n  },\n  DE: { length: 22, structure: 'F08F10', example: 'DE89370400440532013000' },\n  DK: { length: 18, structure: 'F04F09F01', example: 'DK5000400440116243' },\n  DO: {\n    length: 28,\n    structure: 'U04F20',\n    example: 'DO28BAGR00000001212453611324',\n  },\n  DZ: { length: 24, structure: 'F20', example: 'DZ8612345678901234567890' },\n  EE: {\n    length: 20,\n    structure: 'F02F02F11F01',\n    example: 'EE382200221020145685',\n  },\n  ES: {\n    length: 24,\n    structure: 'F04F04F01F01F10',\n    example: 'ES9121000418450200051332',\n  },\n  FI: { length: 18, structure: 'F06F07F01', example: 'FI2112345600000785' },\n  FO: { length: 18, structure: 'F04F09F01', example: 'FO6264600001631634' },\n  FR: {\n    length: 27,\n    structure: 'F05F05A11F02',\n    example: 'FR1420041010050500013M02606',\n  },\n  GB: { length: 22, structure: 'U04F06F08', example: 'GB29NWBK60161331926819' },\n  GE: { length: 22, structure: 'U02F16', example: 'GE29NB0000000101904917' },\n  GI: { length: 23, structure: 'U04A15', example: 'GI75NWBK000000007099453' },\n  GL: { length: 18, structure: 'F04F09F01', example: 'GL8964710001000206' },\n  GR: {\n    length: 27,\n    structure: 'F03F04A16',\n    example: 'GR1601101250000000012300695',\n  },\n  GT: {\n    length: 28,\n    structure: 'A04A20',\n    example: 'GT82TRAJ01020000001210029690',\n  },\n  HR: { length: 21, structure: 'F07F10', example: 'HR1210010051863000160' },\n  HU: {\n    length: 28,\n    structure: 'F03F04F01F15F01',\n    example: 'HU42117730161111101800000000',\n  },\n  IE: { length: 22, structure: 'U04F06F08', example: 'IE29AIBK93115212345678' },\n  IL: {\n    length: 23,\n    structure: 'F03F03F13',\n    example: 'IL620108000000099999999',\n  },\n  IS: {\n    length: 26,\n    structure: 'F04F02F06F10',\n    example: 'IS140159260076545510730339',\n  },\n  IT: {\n    length: 27,\n    structure: 'U01F05F05A12',\n    example: 'IT60X0542811101000000123456',\n  },\n  IQ: {\n    length: 23,\n    structure: 'U04F03A12',\n    example: 'IQ98NBIQ850123456789012',\n  },\n  IR: { length: 26, structure: 'F22', example: 'IR861234568790123456789012' },\n  JO: {\n    length: 30,\n    structure: 'A04F22',\n    example: 'JO15AAAA1234567890123456789012',\n  },\n  KW: {\n    length: 30,\n    structure: 'U04A22',\n    example: 'KW81CBKU0000000000001234560101',\n  },\n  KZ: { length: 20, structure: 'F03A13', example: 'KZ86125KZT5004100100' },\n  LB: {\n    length: 28,\n    structure: 'F04A20',\n    example: 'LB62099900000001001901229114',\n  },\n  LC: {\n    length: 32,\n    structure: 'U04F24',\n    example: 'LC07HEMM000100010012001200013015',\n  },\n  LI: { length: 21, structure: 'F05A12', example: 'LI21088100002324013AA' },\n  LT: { length: 20, structure: 'F05F11', example: 'LT121000011101001000' },\n  LU: { length: 20, structure: 'F03A13', example: 'LU280019400644750000' },\n  LV: { length: 21, structure: 'U04A13', example: 'LV80BANK0000435195001' },\n  MC: {\n    length: 27,\n    structure: 'F05F05A11F02',\n    example: 'MC5811222000010123456789030',\n  },\n  MD: { length: 24, structure: 'U02A18', example: 'MD24AG000225100013104168' },\n  ME: { length: 22, structure: 'F03F13F02', example: 'ME25505000012345678951' },\n  MG: { length: 27, structure: 'F23', example: 'MG1812345678901234567890123' },\n  MK: { length: 19, structure: 'F03A10F02', example: 'MK07250120000058984' },\n  ML: {\n    length: 28,\n    structure: 'U01F23',\n    example: 'ML15A12345678901234567890123',\n  },\n  MR: {\n    length: 27,\n    structure: 'F05F05F11F02',\n    example: 'MR1300020001010000123456753',\n  },\n  MT: {\n    length: 31,\n    structure: 'U04F05A18',\n    example: 'MT84MALT011000012345MTLCAST001S',\n  },\n  MU: {\n    length: 30,\n    structure: 'U04F02F02F12F03U03',\n    example: 'MU17BOMM0101101030300200000MUR',\n  },\n  MZ: { length: 25, structure: 'F21', example: 'MZ25123456789012345678901' },\n  NL: { length: 18, structure: 'U04F10', example: 'NL91ABNA0417164300' },\n  NO: { length: 15, structure: 'F04F06F01', example: 'NO9386011117947' },\n  PK: { length: 24, structure: 'U04A16', example: 'PK36SCBL0000001123456702' },\n  PL: {\n    length: 28,\n    structure: 'F08F16',\n    example: 'PL61109010140000071219812874',\n  },\n  PS: {\n    length: 29,\n    structure: 'U04A21',\n    example: 'PS92PALS000000000400123456702',\n  },\n  PT: {\n    length: 25,\n    structure: 'F04F04F11F02',\n    example: 'PT50000201231234567890154',\n  },\n  QA: {\n    length: 29,\n    structure: 'U04A21',\n    example: 'QA30AAAA123456789012345678901',\n  },\n  RO: { length: 24, structure: 'U04A16', example: 'RO49AAAA1B31007593840000' },\n  RS: { length: 22, structure: 'F03F13F02', example: 'RS35260005601001611379' },\n  SA: { length: 24, structure: 'F02A18', example: 'SA0380000000608010167519' },\n  SC: {\n    length: 31,\n    structure: 'U04F04F16U03',\n    example: 'SC18SSCB11010000000000001497USD',\n  },\n  SE: {\n    length: 24,\n    structure: 'F03F16F01',\n    example: 'SE4550000000058398257466',\n  },\n  SI: { length: 19, structure: 'F05F08F02', example: 'SI56263300012039086' },\n  SK: {\n    length: 24,\n    structure: 'F04F06F10',\n    example: 'SK3112000000198742637541',\n  },\n  SM: {\n    length: 27,\n    structure: 'U01F05F05A12',\n    example: 'SM86U0322509800000000270100',\n  },\n  SN: {\n    length: 28,\n    structure: 'U01F23',\n    example: 'SN52A12345678901234567890123',\n  },\n  ST: {\n    length: 25,\n    structure: 'F08F11F02',\n    example: 'ST68000100010051845310112',\n  },\n  SV: {\n    length: 28,\n    structure: 'U04F20',\n    example: 'SV62CENR00000000000000700025',\n  },\n  TL: {\n    length: 23,\n    structure: 'F03F14F02',\n    example: 'TL380080012345678910157',\n  },\n  TN: {\n    length: 24,\n    structure: 'F02F03F13F02',\n    example: 'TN5910006035183598478831',\n  },\n  TR: {\n    length: 26,\n    structure: 'F05F01A16',\n    example: 'TR330006100519786457841326',\n  },\n  UA: {\n    length: 29,\n    structure: 'F25',\n    example: 'UA511234567890123456789012345',\n  },\n  VA: { length: 22, structure: 'F18', example: 'VA59001123000012345678' },\n  VG: { length: 24, structure: 'U04F16', example: 'VG96VPVG0000012345678901' },\n  XK: { length: 20, structure: 'F04F10F02', example: 'XK051212012345678906' },\n};\n\nconst A = 'A'.charCodeAt(0);\nconst Z = 'Z'.charCodeAt(0);\n\nfunction parseStructure(structure: string): RegExp {\n  // split in blocks of 3 chars\n  const regex = structure.match(/(.{3})/g).map(function (block: string) {\n    // parse each structure block (1-char + 2-digits)\n    let format;\n    const pattern = block.slice(0, 1);\n    const repeats = parseInt(block.slice(1), 10);\n\n    switch (pattern) {\n      case 'A':\n        format = '0-9A-Za-z';\n        break;\n      case 'B':\n        format = '0-9A-Z';\n        break;\n      case 'C':\n        format = 'A-Za-z';\n        break;\n      case 'F':\n        format = '0-9';\n        break;\n      case 'L':\n        format = 'a-z';\n        break;\n      case 'U':\n        format = 'A-Z';\n        break;\n      case 'W':\n        format = '0-9a-z';\n        break;\n    }\n\n    return '([' + format + ']{' + repeats + '})';\n  });\n\n  return new RegExp('^' + regex.join('') + '$');\n}\n\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n */\nfunction iso13616Prepare(iban: string): string {\n  iban = iban.toUpperCase();\n  iban = iban.substr(4) + iban.substr(0, 4);\n\n  return iban\n    .split('')\n    .map(function (n) {\n      const code = n.charCodeAt(0);\n      if (code >= A && code <= Z) {\n        // A = 10, B = 11, ... Z = 35\n        return code - A + 10;\n      } else {\n        return n;\n      }\n    })\n    .join('');\n}\n\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @param iban\n * @returns {number}\n */\nfunction iso7064Mod97_10(iban: string): number {\n  let remainder = iban;\n  let block;\n\n  while (remainder.length > 2) {\n    block = remainder.slice(0, 9);\n    remainder = (parseInt(block, 10) % 97) + remainder.slice(block.length);\n  }\n\n  return parseInt(remainder, 10) % 97;\n}\n\nfunction _testIBAN(\n  iban: string,\n  countryCode: string,\n  structure: Specification,\n): boolean {\n  return (\n    structure.length === iban.length &&\n    countryCode === iban.slice(0, 2) &&\n    parseStructure(structure.structure).test(iban.slice(4)) &&\n    iso7064Mod97_10(iso13616Prepare(iban)) === 1\n  );\n}\n\nfunction validate(iban: string): boolean {\n  iban = iban.toUpperCase();\n  const countryCode = iban.slice(0, 2);\n  const countryStructure = IBAN_SPECIFICATIONS[countryCode];\n  return !!countryStructure && _testIBAN(iban, countryCode, countryStructure);\n}\n\nexport default new GraphQLScalarType({\n  name: `IBAN`,\n  description: `A field whose value is an International Bank Account Number (IBAN): https://en.wikipedia.org/wiki/International_Bank_Account_Number.`,\n  serialize(value) {\n    if (typeof value !== 'string') {\n      throw new TypeError(`Value is not string: ${value}`);\n    }\n\n    if (!validate(value)) {\n      throw new TypeError(`Value is not a valid IBAN: ${value}`);\n    }\n\n    return value;\n  },\n\n  parseValue(value) {\n    if (typeof value !== 'string') {\n      throw new TypeError(`Value is not string: ${value}`);\n    }\n\n    if (!validate(value)) {\n      throw new TypeError(`Value is not a valid IBAN: ${value}`);\n    }\n\n    return value;\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `Can only validate strings as IBANs but got a: ${ast.kind}`,\n      );\n    }\n\n    if (!validate(ast.value)) {\n      throw new TypeError(`Value is not a valid IBAN: ${ast.value}`);\n    }\n\n    return ast.value;\n  },\n});\n","import { ValueNode } from 'graphql/language';\nimport { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nconst MONGODB_OBJECTID_REGEX = new RegExp(/^[A-Fa-f0-9]{24}$/);\n\nexport default new GraphQLScalarType({\n  name: 'ObjectID',\n\n  description:\n    'A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c',\n\n  serialize(value: string) {\n    if (!MONGODB_OBJECTID_REGEX.test(value)) {\n      throw new TypeError(\n        `Value is not a valid mongodb object id of form: ${value}`,\n      );\n    }\n\n    return value;\n  },\n\n  parseValue(value: string) {\n    if (!MONGODB_OBJECTID_REGEX.test(value)) {\n      throw new TypeError(\n        `Value is not a valid mongodb object id of form: ${value}`,\n      );\n    }\n\n    return value;\n  },\n\n  parseLiteral(ast: ValueNode) {\n    if (ast.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `Can only validate strings as mongodb object id but got a: ${ast.kind}`,\n      );\n    }\n\n    if (!MONGODB_OBJECTID_REGEX.test(ast.value)) {\n      throw new TypeError(\n        `Value is not a valid mongodb object id of form: ${ast.value}`,\n      );\n    }\n\n    return ast.value;\n  },\n});\n","import { GraphQLScalarType } from 'graphql';\n\nexport default new GraphQLScalarType({\n  name: 'Void',\n\n  description: 'Represents NULL values',\n\n  serialize() {\n    return null;\n  },\n\n  parseValue() {\n    return null;\n  },\n\n  parseLiteral() {\n    return null;\n  },\n});\n","import DateTime from './DateTime';\nimport UtcOffset from './UtcOffset';\nimport NonPositiveInt from './NonPositiveInt';\nimport PositiveInt from './PositiveInt';\nimport NonNegativeIntFactory from './NonNegativeInt';\nimport NegativeInt from './NegativeInt';\nimport NonPositiveFloat from './NonPositiveFloat';\nimport PositiveFloat from './PositiveFloat';\nimport NonNegativeFloatFactory from './NonNegativeFloat';\nimport NegativeFloat from './NegativeFloat';\nimport EmailAddress from './EmailAddress';\nimport URL from './URL';\nimport PhoneNumber from './PhoneNumber';\nimport PostalCode from './PostalCode';\nimport BigIntFactory from './BigInt';\nimport GUID from './GUID';\nimport Hexadecimal from './Hexadecimal';\nimport HexColorCode from './HexColorCode';\nimport HSL from './HSL';\nimport HSLA from './HSLA';\nimport IPv4 from './IPv4';\nimport IPv6 from './IPv6';\nimport ISBN from './ISBN';\nimport MAC from './MAC';\nimport Port from './Port';\nimport RGB from './RGB';\nimport RGBA from './RGBA';\nimport USCurrency from './USCurrency';\nimport { JSON, JSONObject } from './JSON';\nimport IBAN from './IBAN';\nimport ObjectID from './ObjectID';\nimport Void from './Void';\n\nconst BigIntResolver = BigIntFactory('BigInt');\nconst LongResolver = BigIntFactory('Long');\n\nconst NonNegativeIntResolver = NonNegativeIntFactory('NonNegativeInt');\nconst UnsignedIntResolver = NonNegativeIntFactory('UnsignedInt');\n\nconst NonNegativeFloatResolver = NonNegativeFloatFactory('NonNegativeFloat');\nconst UnsignedFloatResolver = NonNegativeFloatFactory('UnsignedFloat');\n\nexport {\n  DateTime,\n  UtcOffset,\n  NonPositiveInt,\n  PositiveInt,\n  NonNegativeIntResolver as NonNegativeInt,\n  UnsignedIntResolver as UnsignedInt,\n  NegativeInt,\n  NonPositiveFloat,\n  PositiveFloat,\n  NonNegativeFloatResolver as NonNegativeFloat,\n  UnsignedFloatResolver as UnsignedFloat,\n  NegativeFloat,\n  EmailAddress,\n  URL,\n  PhoneNumber,\n  PostalCode,\n  BigIntResolver as BigInt,\n  LongResolver as Long,\n  GUID,\n  Hexadecimal,\n  HexColorCode,\n  HSL,\n  HSLA,\n  IPv4,\n  IPv6,\n  ISBN,\n  MAC,\n  Port,\n  RGB,\n  RGBA,\n  USCurrency,\n  JSON,\n  JSONObject,\n  IBAN,\n  ObjectID,\n  Void,\n};\n","const BigIntMock = () => BigInt(Number.MAX_SAFE_INTEGER);\nexport const DateTime = () => new Date();\nexport const UtcOffset = () => '+03:00';\nexport const EmailAddress = () => 'test@test.com';\nexport const NegativeFloat = () => -123.45;\nexport const NegativeInt = () => -123;\nexport const NonNegativeFloat = () => 123.45;\nexport const NonNegativeInt = () => 123;\nexport const NonPositiveFloat = () => -123.45;\nexport const NonPositiveInt = () => -123;\nexport const PhoneNumber = () => '+17895551234';\nexport const ObjectID = () => '5e5677d71bdc2ae76344968c';\nexport const PositiveFloat = () => 123.45;\nexport const PositiveInt = () => 123;\nexport const PostalCode = () => '60031';\nconst URLMock = () => new URL('http://www.test.com/') as any;\n// https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\nexport const GUID = () => {\n  // Public Domain/MIT\n  let d = new Date().getTime();\n  if (\n    typeof performance !== 'undefined' &&\n    typeof performance.now === 'function'\n  ) {\n    d += performance.now(); // use high-precision timer if available\n  }\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    // tslint:disable-next-line: no-bitwise\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    // tslint:disable-next-line: no-bitwise\n    return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\nexport const HexColorCode = () =>\n  '#' + Math.floor(Math.random() * 16777215).toString(16);\nexport const Hexadecimal = () =>\n  Math.floor(Math.random() * 16777215).toString(16);\n\nconst randomVal = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min) + 1) + min;\n};\n// https://codepen.io/meowwwls/pen/jbEJRp\nexport const HSL = () =>\n  `hsl(${randomVal(0, 360)}, ${randomVal(30, 95)}%, ${randomVal(30, 80)}%)`;\nexport const HSLA = () =>\n  `hsla(${randomVal(0, 360)}, ${randomVal(30, 95)}%, ${randomVal(\n    30,\n    80,\n  )}%, ${Math.random()})`;\n\n// https://stackoverflow.com/questions/43464519/creating-fake-ip-address-using-javascript\nexport const IPv4 = () =>\n  Math.floor(Math.random() * 255) +\n  1 +\n  '.' +\n  (Math.floor(Math.random() * 255) + 0) +\n  '.' +\n  (Math.floor(Math.random() * 255) + 0) +\n  '.' +\n  (Math.floor(Math.random() * 255) + 0);\nexport const IPv6 = () => '2001:0db8:85a3:0000:0000:8a2e:0370:7334';\n// http://jsfiddle.net/guest271314/qhbC9/\nexport const MAC = () =>\n  'XX:XX:XX:XX:XX:XX'.replace(/X/g, () =>\n    '0123456789ABCDEF'.charAt(Math.floor(Math.random() * 16)),\n  );\nexport const Port = () => randomVal(0, 65535);\nexport const RGB = () =>\n  `rgb(${randomVal(0, 255)}, ${randomVal(0, 255)}, ${randomVal(0, 255)})`;\nexport const RGBA = () =>\n  `rgba(${randomVal(0, 255)}, ${randomVal(0, 255)}, ${randomVal(\n    0,\n    255,\n  )}, ${Math.random()})`;\nexport const ISBN = () => `978-3-16-148410-0`;\nexport const USCurrency = () => 1000;\nexport const JSON = () => ({});\nexport const JSONObject = () => ({});\nexport const IBAN = () => 'NL55INGB4789170233';\nexport const Void = (): null => null;\n\nexport {\n  URLMock as URL,\n  NonNegativeInt as UnsignedInt,\n  NonNegativeFloat as UnsignedFloat,\n  BigIntMock as Long,\n  BigIntMock as BigInt,\n};\n","export const BigInt = 'scalar BigInt';\nexport const DateTime = 'scalar DateTime';\nexport const UtcOffset = 'scalar UtcOffset';\nexport const EmailAddress = 'scalar EmailAddress';\nexport const GUID = `scalar GUID`;\nexport const Hexadecimal = `scalar Hexadecimal`;\nexport const HexColorCode = `scalar HexColorCode`;\nexport const HSL = `scalar HSL`;\nexport const HSLA = `scalar HSLA`;\nexport const IBAN = `scalar IBAN`;\nexport const IPv4 = `scalar IPv4`;\nexport const IPv6 = `scalar IPv6`;\nexport const ISBN = `scalar ISBN`;\nexport const JSON = `scalar JSON`;\nexport const JSONObject = `scalar JSONObject`;\nexport const MAC = `scalar MAC`;\nexport const NegativeFloat = 'scalar NegativeFloat';\nexport const NegativeInt = 'scalar NegativeInt';\nexport const NonNegativeFloat = 'scalar NonNegativeFloat';\nexport const NonNegativeInt = 'scalar NonNegativeInt';\nexport const NonPositiveFloat = 'scalar NonPositiveFloat';\nexport const NonPositiveInt = 'scalar NonPositiveInt';\nexport const PhoneNumber = 'scalar PhoneNumber';\nexport const Port = `scalar Port`;\nexport const PositiveFloat = 'scalar PositiveFloat';\nexport const PositiveInt = 'scalar PositiveInt';\nexport const PostalCode = 'scalar PostalCode';\nexport const RGB = `scalar RGB`;\nexport const RGBA = `scalar RGBA`;\nexport const URL = 'scalar URL';\nexport const USCurrency = `scalar USCurrency`;\n\nexport const UnsignedFloat = 'scalar UnsignedFloat';\nexport const UnsignedInt = 'scalar UnsignedInt';\nexport const Long = 'scalar Long';\nexport const ObjectID = 'scalar ObjectID';\n\nexport const Void = 'scalar Void';\n\nexport default [\n  DateTime,\n  UtcOffset,\n  EmailAddress,\n  NegativeFloat,\n  NegativeInt,\n  NonNegativeFloat,\n  NonNegativeInt,\n  NonPositiveFloat,\n  NonPositiveInt,\n  PhoneNumber,\n  PositiveFloat,\n  PositiveInt,\n  PostalCode,\n  UnsignedFloat,\n  UnsignedInt,\n  URL,\n  BigInt,\n  Long,\n  GUID,\n  Hexadecimal,\n  HexColorCode,\n  HSL,\n  HSLA,\n  IPv4,\n  IPv6,\n  ISBN,\n  MAC,\n  Port,\n  RGB,\n  RGBA,\n  USCurrency,\n  JSON,\n  JSONObject,\n  IBAN,\n  ObjectID,\n  Void,\n];\n","import { Kind, GraphQLError, GraphQLScalarType } from 'graphql';\n\nexport type RegularExpressionErrorMessageFn = (r: RegExp, v: any) => string;\n\nexport interface RegularExpressionOptions {\n  errorMessage?: RegularExpressionErrorMessageFn;\n}\n\nexport default class RegularExpression extends GraphQLScalarType {\n  constructor(\n    name: string,\n    regex: RegExp,\n    options: RegularExpressionOptions = {},\n  ) {\n    const REGEX = new RegExp(regex);\n    const errorMessage: RegularExpressionErrorMessageFn = options.errorMessage\n      ? options.errorMessage\n      : (r, v) => `Value does not match the regular expression ${r}: ${v}`;\n    super({\n      name,\n\n      description: `A field whose value matches the provided regular expression ${regex}.`,\n\n      serialize(value) {\n        if (typeof value !== 'string') {\n          throw new TypeError(`Value is not string: ${value}`);\n        }\n\n        if (!REGEX.test(value)) {\n          throw new TypeError(errorMessage(regex, value));\n        }\n\n        return value;\n      },\n\n      parseValue(value) {\n        if (typeof value !== 'string') {\n          throw new TypeError(`Value is not string: ${value}`);\n        }\n\n        if (!REGEX.test(value)) {\n          throw new TypeError(errorMessage(regex, value));\n        }\n\n        return value;\n      },\n\n      parseLiteral(ast) {\n        if (ast.kind !== Kind.STRING) {\n          throw new GraphQLError(\n            `Can only validate strings as regular expressions but got a: ${\n            ast.kind\n            }`,\n          );\n        }\n\n        if (!REGEX.test(ast.value)) {\n          throw new TypeError(errorMessage(regex, ast.value));\n        }\n\n        return ast.value;\n      },\n    });\n  }\n}\n\n"],"names":["validate","JSON","DateTime","UtcOffset","EmailAddress","NegativeFloat","NegativeInt","NonPositiveFloat","NonPositiveInt","PhoneNumber","ObjectID","PositiveFloat","PositiveInt","PostalCode","GUID","HexColorCode","Hexadecimal","HSL","HSLA","IPv4","IPv6","MAC","Port","RGB","RGBA","ISBN","USCurrency","JSONObject","IBAN","Void","BigInt","NonNegativeFloat","NonNegativeInt","URL"],"mappings":";;AAEA,iBAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,UAAU;IAEhB,WAAW,EAAE,kDAAkD;IAE/D,SAAS,CAAC,KAAK;QACb,IAAI,CAAC,GAAG,KAAK,CAAC;QAEd,IAAI,EAAE,CAAC,YAAY,IAAI,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;YAC1E,MAAM,IAAI,SAAS,CACjB,4DAA4D,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAChF,CAAC;SACH;QAED,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;YACzB,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;YAEf,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;SAC9B;aAAM,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;YAChC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;SACjB;;QAGD,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE;YAC7B,MAAM,IAAI,SAAS,CAAC,8BAA8B,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;SACxE;QAED,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;KACnB;IAED,UAAU,CAAC,KAAK;QACd,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;;QAG7B,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE;YAChC,MAAM,IAAI,SAAS,CAAC,8BAA8B,KAAK,EAAE,CAAC,CAAC;SAC5D;QAED,OAAO,IAAI,CAAC;KACb;IAED,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,EAAE;YACrD,MAAM,IAAI,YAAY,CACpB,yDAAyD,GAAG,CAAC,IAAI,EAAE,CACpE,CAAC;SACH;QAED,MAAM,MAAM,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;;QAG/E,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE;YAClC,MAAM,IAAI,YAAY,CAAC,8BAA8B,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;SACnE;QAED,OAAO,MAAM,CAAC;KACf;CACF,CAAC;;ACzDF,MAAM,QAAQ,GAAG,CAAC,KAAU;IAC1B,MAAM,gBAAgB,GAAG,0BAA0B,CAAC;IAEpD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;KACtD;IAED,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QACjC,MAAM,IAAI,SAAS,CAAC,oCAAoC,KAAK,EAAE,CAAC,CAAC;KAClE;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,kBAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,WAAW;IAEjB,WAAW,EACT,mGAAmG;IAErG,SAAS,EAAE,QAAQ;IAEnB,UAAU,EAAE,QAAQ;IAEpB,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC5B,MAAM,IAAI,YAAY,CACpB,sDAAsD,GAAG,CAAC,IAAI,EAAE,CACjE,CAAC;SACH;QAED,OAAO,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC5B;CACF,CAAC;;ACnCF,IAAK,YAKJ;AALD,WAAK,YAAY;IACf,uDAAQ,CAAA;IACR,+DAAY,CAAA;IACZ,uDAAQ,CAAA;IACR,+DAAY,CAAA;AACd,CAAC,EALI,YAAY,KAAZ,YAAY,QAKhB;AAED,IAAK,WAGJ;AAHD,WAAK,WAAW;IACd,2CAAG,CAAA;IACH,+CAAK,CAAA;AACP,CAAC,EAHI,WAAW,KAAX,WAAW,QAGf;AAED,MAAM,WAAW,GAAG;IAClB,cAAc,EAAE;QACd,KAAK,EAAE,YAAY,CAAC,YAAY;QAChC,IAAI,EAAE,WAAW,CAAC,GAAG;KACtB;IACD,WAAW,EAAE;QACX,KAAK,EAAE,YAAY,CAAC,QAAQ;QAC5B,IAAI,EAAE,WAAW,CAAC,GAAG;KACtB;IACD,cAAc,EAAE;QACd,KAAK,EAAE,YAAY,CAAC,YAAY;QAChC,IAAI,EAAE,WAAW,CAAC,GAAG;KACtB;IACD,WAAW,EAAE;QACX,KAAK,EAAE,YAAY,CAAC,QAAQ;QAC5B,IAAI,EAAE,WAAW,CAAC,GAAG;KACtB;IAED,gBAAgB,EAAE;QAChB,KAAK,EAAE,YAAY,CAAC,YAAY;QAChC,IAAI,EAAE,WAAW,CAAC,KAAK;KACxB;IACD,aAAa,EAAE;QACb,KAAK,EAAE,YAAY,CAAC,QAAQ;QAC5B,IAAI,EAAE,WAAW,CAAC,KAAK;KACxB;IACD,gBAAgB,EAAE;QAChB,KAAK,EAAE,YAAY,CAAC,YAAY;QAChC,IAAI,EAAE,WAAW,CAAC,KAAK;KACxB;IACD,aAAa,EAAE;QACb,KAAK,EAAE,YAAY,CAAC,QAAQ;QAC5B,IAAI,EAAE,WAAW,CAAC,KAAK;KACxB;CACF,CAAC;AAEF;AACA;AACA;AAEA,SAAS,YAAY,CAAC,KAAU;IAC9B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,iCAAiC,KAAK,EAAE,CAAC,CAAC;KAC/D;IAED,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;QAC5B,MAAM,IAAI,SAAS,CAAC,4BAA4B,KAAK,EAAE,CAAC,CAAC;KAC1D;IAED,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;QAChC,MAAM,IAAI,SAAS,CAAC,gCAAgC,KAAK,EAAE,CAAC,CAAC;KAC9D;AACH,CAAC;AAED,SAAS,cAAc,CAAC,KAAU;IAChC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,iCAAiC,KAAK,EAAE,CAAC,CAAC;KAC/D;AACH,CAAC;AAED,SAAS,YAAY,CAAC,KAAU,EAAE,UAAqD;IACrF,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC;;IAGnC,IACE,KAAK,KAAK,IAAI;QACd,OAAO,KAAK,KAAK,WAAW;QAC5B,KAAK,CAAC,KAAK,CAAC;QACZ,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;QACnB,KAAK,KAAK,MAAM,CAAC,GAAG,EACpB;QACA,MAAM,IAAI,SAAS,CAAC,0BAA0B,KAAK,EAAE,CAAC,CAAC;KACxD;;IAGD,IAAI,WAAW,CAAC;IAEhB,QAAQ,IAAI;QACV,KAAK,WAAW,CAAC,KAAK;YACpB,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;YAChC,cAAc,CAAC,WAAW,CAAC,CAAC;YAC5B,MAAM;QAER,KAAK,WAAW,CAAC,GAAG;YAClB,WAAW,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAClC,YAAY,CAAC,WAAW,CAAC,CAAC;YAC1B,MAAM;;KAIT;IAED,IACE,CAAC,KAAK,KAAK,YAAY,CAAC,QAAQ,IAAI,EAAE,WAAW,GAAG,CAAC,CAAC;SACrD,KAAK,KAAK,YAAY,CAAC,YAAY,IAAI,EAAE,WAAW,IAAI,CAAC,CAAC,CAAC;SAC3D,KAAK,KAAK,YAAY,CAAC,QAAQ,IAAI,EAAE,WAAW,GAAG,CAAC,CAAC,CAAC;SACtD,KAAK,KAAK,YAAY,CAAC,YAAY,IAAI,EAAE,WAAW,IAAI,CAAC,CAAC,CAAC,EAC5D;QACA,MAAM,IAAI,SAAS,CACjB,kBAAkB,YAAY,CAAC,KAAK,CAAC;aAClC,WAAW,EAAE;aACb,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,YAAY,KAAK,EAAE,CACxC,CAAC;KACH;IAED,OAAO,WAAW,CAAC;AACrB;;ACnHA,uBAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,gBAAgB;IAEtB,WAAW,EAAE,+CAA+C;IAE5D,SAAS,CAAC,KAAK;QACb,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;KACxD;IAED,UAAU,CAAC,KAAK;QACd,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;KACxD;IAED,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,EAAE;YACzB,MAAM,IAAI,YAAY,CACpB,kEACE,GAAG,CAAC,IACN,EAAE,CACH,CAAC;SACH;QAED,OAAO,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;KAC5D;CACF,CAAC;;ACxBF,oBAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,aAAa;IAEnB,WAAW,EAAE,iDAAiD;IAE9D,SAAS,CAAC,KAAK;QACb,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;KACrD;IAED,UAAU,CAAC,KAAK;QACd,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;KACrD;IAED,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,EAAE;YACzB,MAAM,IAAI,YAAY,CACpB,8DACE,GAAG,CAAC,IACN,EAAE,CACH,CAAC;SACH;QAED,OAAO,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;KACzD;CACF,CAAC;;gCCxBuB,IAAI,GAAG,gBAAgB;IAC9C,OAAO,IAAI,iBAAiB,CAAC;QAC3B,IAAI;QAEJ,WAAW,EAAE,+CAA+C;QAE5D,SAAS,CAAC,KAAK;YACb,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;SACxD;QAED,UAAU,CAAC,KAAK;YACd,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;SACxD;QAED,YAAY,CAAC,GAAG;YACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,EAAE;gBACzB,MAAM,IAAI,YAAY,CACpB,kEACA,GAAG,CAAC,IACJ,EAAE,CACH,CAAC;aACH;YAED,OAAO,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;SAC5D;KACF,CAAC,CAAC;AACL;;AC1BA,oBAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,aAAa;IAEnB,WAAW,EAAE,8CAA8C;IAE3D,SAAS,CAAC,KAAK;QACb,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;KACrD;IAED,UAAU,CAAC,KAAK;QACd,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;KACrD;IAED,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,EAAE;YACzB,MAAM,IAAI,YAAY,CACpB,8DACE,GAAG,CAAC,IACN,EAAE,CACH,CAAC;SACH;QAED,OAAO,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;KACzD;CACF,CAAC;;ACxBF,yBAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,kBAAkB;IAExB,WAAW,EAAE,6CAA6C;IAE1D,SAAS,CAAC,KAAK;QACb,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,gBAAgB,CAAC,CAAC;KAC1D;IAED,UAAU,CAAC,KAAK;QACd,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,gBAAgB,CAAC,CAAC;KAC1D;IAED,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,EAAE;YACpD,MAAM,IAAI,YAAY,CACpB,8FACE,GAAG,CAAC,IACN,EAAE,CACH,CAAC;SACH;QAED,OAAO,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC,gBAAgB,CAAC,CAAC;KAC9D;CACF,CAAC;;ACxBF,sBAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,eAAe;IAErB,WAAW,EAAE,+CAA+C;IAE5D,SAAS,CAAC,KAAK;QACb,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC;KACvD;IAED,UAAU,CAAC,KAAK;QACd,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC;KACvD;IAED,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,EAAE;YACpD,MAAM,IAAI,YAAY,CACpB,0FACE,GAAG,CAAC,IACN,EAAE,CACH,CAAC;SACH;QAED,OAAO,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC;KAC3D;CACF,CAAC;;kCCxBuB,IAAI,GAAG,kBAAkB;IAChD,OAAO,IAAI,iBAAiB,CAAC;QAC3B,IAAI;QAEJ,WAAW,EAAE,6CAA6C;QAE1D,SAAS,CAAC,KAAK;YACb,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,gBAAgB,CAAC,CAAC;SAC1D;QAED,UAAU,CAAC,KAAK;YACd,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,gBAAgB,CAAC,CAAC;SAC1D;QAED,YAAY,CAAC,GAAG;YACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,EAAE;gBACpD,MAAM,IAAI,YAAY,CACpB,8FACA,GAAG,CAAC,IACJ,EAAE,CACH,CAAC;aACH;YAED,OAAO,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC,gBAAgB,CAAC,CAAC;SAC9D;KACF,CAAC,CAAC;AACL;;AC1BA,sBAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,eAAe;IAErB,WAAW,EAAE,4CAA4C;IAEzD,SAAS,CAAC,KAAK;QACb,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC;KACvD;IAED,UAAU,CAAC,KAAK;QACd,OAAO,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC;KACvD;IAED,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,EAAE;YACpD,MAAM,IAAI,YAAY,CACpB,0FACE,GAAG,CAAC,IACN,EAAE,CACH,CAAC;SACH;QAED,OAAO,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC;KAC3D;CACF,CAAC;;ACzBF,MAAMA,UAAQ,GAAG,CAAC,KAAU;IAC1B,MAAM,mBAAmB,GAAG,sEAAsE,CAAC;IAEnG,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;KACtD;IAED,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QACpC,MAAM,IAAI,SAAS,CAAC,uCAAuC,KAAK,EAAE,CAAC,CAAC;KACrE;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,qBAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,cAAc;IAEpB,WAAW,EACT,0IAA0I;IAE5I,SAAS,EAAEA,UAAQ;IAEnB,UAAU,EAAEA,UAAQ;IAEpB,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC5B,MAAM,IAAI,YAAY,CACpB,2DAA2D,GAAG,CAAC,IAAI,EAAE,CACtE,CAAC;SACH;QAED,OAAOA,UAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC5B;CACF,CAAC;;ACjCF,cAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,KAAK;IAEX,WAAW,EACT,wHAAwH;IAE1H,SAAS,CAAC,KAAK;QACb,OAAO,IAAI,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;KAC7C;IAED,UAAU,EAAE,KAAK,IAAI,IAAI,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;IAE9C,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC5B,MAAM,IAAI,YAAY,CACpB,gDAAgD,GAAG,CAAC,IAAI,EAAE,CAC3D,CAAC;SACH;QAED,OAAO,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;KACtC;CACF,CAAC;;ACrBF,MAAM,kBAAkB,GAAG,mBAAmB,CAAC;AAE/C,oBAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,aAAa;IAEnB,WAAW,EACT,iJAAiJ;IAEnJ,SAAS,CAAC,KAAK;QACb,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;SACtD;QAED,IAAI,EAAE,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;YACrC,MAAM,IAAI,SAAS,CAAC,8EAA8E,KAAK,EAAE,CAAC,CAAC;SAC5G;QAED,OAAO,KAAK,CAAC;KACd;IAED,UAAU,CAAC,KAAK;QACd,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;SACtD;QAED,IAAI,EAAE,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;YACrC,MAAM,IAAI,SAAS,CAAC,8EAA8E,KAAK,EAAE,CAAC,CAAC;SAC5G;QAED,OAAO,KAAK,CAAC;KACd;IAED,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC5B,MAAM,IAAI,YAAY,CACpB,yDAAyD,GAAG,CAAC,IAAI,EAAE,CACpE,CAAC;SACH;QAED,IAAI,EAAE,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;YACzC,MAAM,IAAI,SAAS,CAAC,8EAA8E,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;SAChH;QAED,OAAO,GAAG,CAAC,KAAK,CAAC;KAClB;CACF,CAAC;;AC7CF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,MAAM,mBAAmB,GAAG;aACjB,IAAI,MAAM,CAAC,qBAAqB,CAAC;aACjC,IAAI,MAAM,CAAC,+DAA+D,CAAC;aAC3E,IAAI,MAAM,CAAC,sFAAsF,CAAC;aAClG,IAAI,MAAM,CAAC,oFAAoF,CAAC;aAChG,IAAI,MAAM,CAAC,oCAAoC,CAAC;aAChD,IAAI,MAAM,CAAC,oBAAoB,CAAC;aAChC,IAAI,MAAM,CAAC,iHAAiH,CAAC;aAC7H,IAAI,MAAM,CAAC,kCAAkC,CAAC;aAC9C,IAAI,MAAM,CAAC,4CAA4C,CAAC;aACxD,IAAI,MAAM,CAAC,sCAAsC,CAAC;aAClD,IAAI,MAAM,CAAC,mCAAmC,CAAC;aAC/C,IAAI,MAAM,CAAC,oBAAoB,CAAC;aAChC,IAAI,MAAM,CAAC,SAAS,CAAC;aACrB,IAAI,MAAM,CAAC,SAAS,CAAC;aACrB,IAAI,MAAM,CAAC,qBAAqB,CAAC;aACjC,IAAI,MAAM,CAAC,SAAS,CAAC;aACrB,IAAI,MAAM,CAAC,SAAS,CAAC;CAC/B,CAAC;AAEF,SAAS,eAAe,CAAC,UAAkB;IACzC,IAAI,MAAM,GAAG,KAAK,CAAC;;IAGnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,mBAAmB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACnD,MAAM,KAAK,GAAG,mBAAmB,CAAC,CAAC,CAAC,CAAC;QAErC,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YAC1B,MAAM,GAAG,IAAI,CAAC;YACd,MAAM;SACP;KACF;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,mBAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,YAAY;IAElB,WAAW,EACT,mPAAmP;IAErP,SAAS,CAAC,KAAK;QACb,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;SACtD;QAED,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;YAC3B,MAAM,IAAI,SAAS,CAAC,qCAAqC,KAAK,EAAE,CAAC,CAAC;SACnE;QAED,OAAO,KAAK,CAAC;KACd;IAED,UAAU,CAAC,KAAK;QACd,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;SACtD;QAED,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;YAC3B,MAAM,IAAI,SAAS,CAAC,qCAAqC,KAAK,EAAE,CAAC,CAAC;SACnE;QAED,OAAO,KAAK,CAAC;KACd;IAED,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC5B,MAAM,IAAI,YAAY,CACpB,wDAAwD,GAAG,CAAC,IAAI,EAAE,CACnE,CAAC;SACH;QAED,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC/B,MAAM,IAAI,SAAS,CAAC,qCAAqC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;SACvE;QAED,OAAO,GAAG,CAAC,KAAK,CAAC;KAClB;CACF,CAAC;;AChHF;wBAUyB,IAAI,GAAG,QAAQ;IACtC,MAAM,CAAC,SAAS,CAAC,MAAM;QACrB,MAAM,CAAC,SAAS,CAAC,MAAM;YACvB;gBACE,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;aACxB,CAAC;IACJ,OAAO,IAAI,iBAAiB,CAAC;QAC3B,IAAI;QACJ,WAAW,EACT,iFAAiF;QACnF,SAAS,EAAE,MAAM;QACjB,UAAU,EAAE,MAAM;QAClB,YAAY,CAAC,GAAG;YACd,IACE,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG;gBACrB,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK;gBACvB,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EACxB;gBACA,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;aAC1B;YACD,OAAO,IAAI,CAAC;SACb;KACF,CAAC,CAAC;AACL;;AC/BA,MAAMA,UAAQ,GAAG,CAAC,KAAU;IAC1B,MAAM,UAAU,GAAG,uGAAuG,CAAC;IAE3H,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;KACtD;IAED,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;QACzB,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KAC9C;IAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,8BAA8B,KAAK,EAAE,CAAC,CAAC;KAC5D;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,aAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,MAAM;IAEZ,WAAW,EAAE,2HAA2H;IAExI,SAAS,CAAC,KAAK;QACb,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KACxB;IAED,UAAU,CAAC,KAAK;QACd,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KACxB;IAED,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC5B,MAAM,IAAI,YAAY,CACpB,iDAAiD,GAAG,CAAC,IAAI,EAAE,CAC5D,CAAC;SACH;QAED,OAAOA,UAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC5B;CACF,CAAC;;ACxCF,MAAMA,UAAQ,GAAG,CAAC,KAAU;IAC1B,MAAM,iBAAiB,GAAG,cAAc,CAAC;IAEzC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;KACtD;IAED,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QAClC,MAAM,IAAI,SAAS,CAAC,2CAA2C,KAAK,EAAE,CAAC,CAAC;KACzE;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,oBAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,aAAa;IAEnB,WAAW,EAAE,kFAAkF;IAE/F,SAAS,CAAC,KAAK;QACb,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KACxB;IAED,UAAU,CAAC,KAAK;QACd,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KACxB;IAED,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC5B,MAAM,IAAI,YAAY,CACpB,yDAAyD,GAAG,CAAC,IAAI,EAAE,CACpE,CAAC;SACH;QAED,OAAOA,UAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC5B;CACF,CAAC;;ACpCF,MAAM,cAAc,GAAG,mDAAmD,CAAC;AAE3E,MAAMA,UAAQ,GAAG,CAAC,KAAU;IACxB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;KACxD;IAED,IAAI,EAAE,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QAC/B,MAAM,IAAI,SAAS,CAAC,sCAAsC,KAAK,EAAE,CAAC,CAAC;KACtE;IAED,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AAEF,qBAAe,IAAI,iBAAiB,CAAC;IACjC,IAAI,EAAE,cAAc;IAEpB,WAAW,EAAE,oFAAoF;IAEjG,SAAS,CAAC,KAAK;QACX,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,UAAU,CAAC,KAAK;QACZ,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,YAAY,CAAC,GAAG;QACZ,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC1B,MAAM,IAAI,YAAY,CAAC,2DAA2D,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;SACjG;QAED,OAAOA,UAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC9B;CACJ,CAAC;;AClCF,MAAMA,UAAQ,GAAG,CAAC,KAAU;IAC1B,MAAM,SAAS,GAAG,oFAAoF,CAAC;IAEvG,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;KACtD;IAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QAC1B,MAAM,IAAI,SAAS,CAAC,mCAAmC,KAAK,EAAE,CAAC,CAAC;KACjE;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,YAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,KAAK;IAEX,WAAW,EAAE,wHAAwH;IAErI,SAAS,CAAC,KAAK;QACb,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KACxB;IAED,UAAU,CAAC,KAAK;QACd,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KACxB;IAED,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC5B,MAAM,IAAI,YAAY,CACpB,sDAAsD,GAAG,CAAC,IAAI,EAAE,CACjE,CAAC;SACH;QAED,OAAOA,UAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC5B;CACF,CAAC;;ACpCF,MAAM,UAAU,GAAG,6GAA6G,CAAC;AAEjI,MAAMA,UAAQ,GAAG,CAAC,KAAU;IACxB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;KACxD;IAED,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,oCAAoC,KAAK,EAAE,CAAC,CAAC;KACpE;IAED,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AAEF,aAAe,IAAI,iBAAiB,CAAC;IACjC,IAAI,EAAE,MAAM;IAEZ,WAAW,EAAE,yHAAyH;IAEtI,SAAS,CAAC,KAAK;QACX,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,UAAU,CAAC,KAAK;QACZ,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,YAAY,CAAC,GAAG;QACZ,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC1B,MAAM,IAAI,YAAY,CAAC,uDAAuD,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;SAC7F;QAED,OAAOA,UAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC9B;CACJ,CAAC;;AClCF,MAAM,UAAU,GAAG,uKAAuK,CAAC;AAE3L,MAAMA,UAAQ,GAAG,CAAC,KAAU;IACxB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;KACxD;IAED,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,sCAAsC,KAAK,EAAE,CAAC,CAAC;KACtE;IAED,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AAEF,aAAe,IAAI,iBAAiB,CAAC;IACjC,IAAI,EAAE,MAAM;IAEZ,WAAW,EAAE,4EAA4E;IAEzF,SAAS,CAAC,KAAK;QACX,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,UAAU,CAAC,KAAK;QACZ,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,YAAY,CAAC,GAAG;QACZ,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC1B,MAAM,IAAI,YAAY,CAAC,0DAA0D,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;SAChG;QAED,OAAOA,UAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC9B;CACJ,CAAC;;AClCF,MAAM,UAAU,GAAG,qpDAAqpD,CAAC;AACzqD,MAAMA,UAAQ,GAAG,CAAC,KAAU;IACxB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;KACxD;IAED,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,sCAAsC,KAAK,EAAE,CAAC,CAAC;KACtE;IAED,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AAEF,aAAe,IAAI,iBAAiB,CAAC;IACjC,IAAI,EAAE,MAAM;IAEZ,WAAW,EAAE,4EAA4E;IAEzF,SAAS,CAAC,KAAK;QACX,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,UAAU,CAAC,KAAK;QACZ,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,YAAY,CAAC,GAAG;QACZ,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC1B,MAAM,IAAI,YAAY,CAAC,0DAA0D,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;SAChG;QAED,OAAOA,UAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC9B;CACJ,CAAC;;ACjCF,MAAM,cAAc,GAAG;IACnB,qFAAqF;IACrF,8FAA8F;CACjG,CAAC;AAEF,MAAMA,UAAQ,GAAG,CAAC,KAAU;IACxB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;KACxD;IAED,IAAI,KAAK,GAAG,KAAK,CAAC;IAClB,KAAK,MAAM,KAAK,IAAI,cAAc,EAAE;QAChC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACnB,KAAK,GAAG,IAAI,CAAC;YACb,MAAM;SACT;KACJ;IAED,IAAI,CAAC,KAAK,EAAE;QACR,MAAM,IAAI,SAAS,CAAC,qCAAqC,KAAK,EAAE,CAAC,CAAC;KACrE;IAED,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AAEF,aAAe,IAAI,iBAAiB,CAAC;IACjC,IAAI,EAAE,MAAM;IAEZ,WAAW,EAAE,uHAAuH;IAEpI,SAAS,CAAC,KAAK;QACX,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,UAAU,CAAC,KAAK;QACZ,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,YAAY,CAAC,GAAG;QACZ,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC1B,MAAM,IAAI,YAAY,CAAC,wDAAwD,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;SAC9F;QAED,OAAOA,UAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC9B;CACJ,CAAC;;AC7CF,MAAM,SAAS,GAAG,kGAAkG,CAAC;AAErH,MAAMA,UAAQ,GAAG,CAAC,KAAU;IACxB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;KACxD;IAED,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QAC1B,MAAM,IAAI,SAAS,CAAC,qCAAqC,KAAK,EAAE,CAAC,CAAC;KACrE;IAED,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AAEF,YAAe,IAAI,iBAAiB,CAAC;IACjC,IAAI,EAAE,KAAK;IAEX,WAAW,EAAE,kGAAkG;IAE/G,SAAS,CAAC,KAAK;QACX,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,UAAU,CAAC,KAAK;QACZ,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,YAAY,CAAC,GAAG;QACZ,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC1B,MAAM,IAAI,YAAY,CAAC,yDAAyD,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;SAC/F;QAED,OAAOA,UAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC9B;CACJ,CAAC;;AClCF,MAAMA,UAAQ,GAAG,CAAC,KAAU;IAExB,MAAM,MAAM,GAAG,OAAO,KAAK,KAAK,QAAQ,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;IAEvE,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;QACpD,MAAM,IAAI,SAAS,CAAC,0BAA0B,KAAK,EAAE,CAAC,CAAC;KAC1D;IAED,IAAI,MAAM,KAAK,QAAQ,IAAI,MAAM,KAAK,CAAC,QAAQ,EAAE;QAC7C,MAAM,IAAI,SAAS,CAAC,iCAAiC,KAAK,EAAE,CAAC,CAAC;KACjE;IAED,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,GAAG,KAAK,EAAE;QAC/B,MAAM,IAAI,SAAS,CAAC,kCAAkC,KAAK,EAAE,CAAC,CAAC;KAClE;IAED,OAAO,MAAM,CAAC;AAClB,CAAC,CAAC;AAEF,aAAe,IAAI,iBAAiB,CAAC;IACjC,IAAI,EAAE,MAAM;IAEZ,WAAW,EAAE,+IAA+I;IAE5J,SAAS,CAAC,KAAK;QACX,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,UAAU,CAAC,KAAK;QACZ,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,YAAY,CAAC,GAAG;QACZ,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,EAAE;YACvB,MAAM,IAAI,YAAY,CAAC,sDAAsD,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;SAC5F;QAED,OAAOA,UAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC9B;CACJ,CAAC;;ACvCF,MAAM,SAAS,GAAG,gHAAgH,CAAC;AAEnI,MAAMA,UAAQ,GAAG,CAAC,KAAU;IACxB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;KACxD;IAED,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QAC1B,MAAM,IAAI,SAAS,CAAC,mCAAmC,KAAK,EAAE,CAAC,CAAC;KACnE;IAED,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AAEF,YAAe,IAAI,iBAAiB,CAAC;IACjC,IAAI,EAAE,KAAK;IAEX,WAAW,EAAE,wHAAwH;IAErI,SAAS,CAAC,KAAK;QACX,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,UAAU,CAAC,KAAK;QACZ,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,YAAY,CAAC,GAAG;QACZ,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC1B,MAAM,IAAI,YAAY,CAAC,sDAAsD,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;SAC5F;QAED,OAAOA,UAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC9B;CACJ,CAAC;;AClCF,MAAM,UAAU,GAAG,yIAAyI,CAAC;AAE7J,MAAMA,UAAQ,GAAG,CAAC,KAAU;IACxB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;KACxD;IAED,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,oCAAoC,KAAK,EAAE,CAAC,CAAC;KACpE;IAED,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AAEF,aAAe,IAAI,iBAAiB,CAAC;IACjC,IAAI,EAAE,MAAM;IAEZ,WAAW,EAAE,yHAAyH;IAEtI,SAAS,CAAC,KAAK;QACX,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,UAAU,CAAC,KAAK;QACZ,OAAOA,UAAQ,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,YAAY,CAAC,GAAG;QACZ,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC1B,MAAM,IAAI,YAAY,CAAC,uDAAuD,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;SAC7F;QAED,OAAOA,UAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC9B;CACJ,CAAC;;ACpCF;AAGA,SAAS,gBAAgB,CAAC,KAAU;IAClC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,MAAM,IAAI,SAAS,CACjB,8CAA8C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CACtE,CAAC;KACH;IAED,MAAM,eAAe,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;IAEvD,OAAO,CAAC,eAAe,GAAG,GAAG,EAAE,cAAc,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;AACjG,CAAC;AAED,SAAS,aAAa,CAAC,KAAa;IAClC,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACvD,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;IAClC,OAAO,MAAM,GAAG,GAAG,CAAC;AACtB,CAAC;AAED;;;;;;;;;;;AAYA,mBAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,YAAY;IAClB,WAAW,EAAE,mCAAmC;IAChD,SAAS,EAAE,gBAAgB;IAC3B,UAAU,CAAC,KAAK;QACd,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,MAAM,IAAI,SAAS,CACjB,6CAA6C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CACrE,CAAC;SACH;QAED,OAAO,aAAa,CAAC,KAAK,CAAC,CAAC;KAC7B;IACD,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC5B,IAAI,OAAO,GAAG,CAAC,KAAK,KAAK,QAAQ,EAAE;gBACjC,OAAO,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;aACjC;SACF;QACD,MAAM,IAAI,SAAS,CACjB,wDAAwD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAC/E,CAAC;KACH;CACF,CAAC;;ACtDF,SAAS,QAAQ,CAAI,KAAQ;IAC3B,OAAO,KAAK,CAAC;AACf,CAAC;AAED;AACA,SAAS,YAAY,CAAC,KAAU;IAC9B,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QACvE,MAAM,IAAI,SAAS,CACjB,iDAAiD,KAAK,EAAE,CACzD,CAAC;KACH;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED,SAAS,WAAW,CAAC,GAAoB,EAAE,SAAc;IACvD,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK;;QAEvB,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;KAChE,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC;AACf,CAAC;AAED,SAAS,YAAY,CAAC,GAAc,EAAE,SAAc;IAClD,QAAQ,GAAG,CAAC,IAAI;QACd,KAAK,IAAI,CAAC,MAAM,CAAC;QACjB,KAAK,IAAI,CAAC,OAAO;YACf,OAAO,GAAG,CAAC,KAAK,CAAC;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC;QACd,KAAK,IAAI,CAAC,KAAK;YACb,OAAO,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC/B,KAAK,IAAI,CAAC,MAAM;YACd,OAAO,WAAW,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;QACrC,KAAK,IAAI,CAAC,IAAI;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,YAAY,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;QAC3D,KAAK,IAAI,CAAC,IAAI;YACZ,OAAO,IAAI,CAAC;QACd,KAAK,IAAI,CAAC,QAAQ,EAAE;YAClB,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;YAC5B,OAAO,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;SAChD;KACF;AACH,CAAC;AAED;AACA;MACaC,MAAI,GAAG,IAAI,iBAAiB,CAAC;IACxC,IAAI,EAAE,MAAM;IACZ,WAAW,EACT,sJAAsJ;IACxJ,SAAS,EAAE,QAAQ;IACnB,UAAU,EAAE,QAAQ;IACpB,YAAY;CACb,EAAE;MAEU,UAAU,GAAG,IAAI,iBAAiB,CAAC;IAC9C,IAAI,EAAE,YAAY;IAClB,WAAW,EACT,6JAA6J;IAC/J,SAAS,EAAE,YAAY;IACvB,UAAU,EAAE,YAAY;IACxB,YAAY,EAAE,WAAW;CAC1B;;AClED;AAcA;;;;AAIA,MAAM,mBAAmB,GAAqB;IAC5C,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,WAAW;QACtB,OAAO,EAAE,0BAA0B;KACpC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,yBAAyB,EAAE;IAC3E,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,8BAA8B;KACxC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,2BAA2B,EAAE;IAC1E,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,sBAAsB,EAAE;IACxE,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,8BAA8B;KACxC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,cAAc;QACzB,OAAO,EAAE,sBAAsB;KAChC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,kBAAkB,EAAE;IACvE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,6BAA6B,EAAE;IAC5E,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,cAAc;QACzB,OAAO,EAAE,wBAAwB;KAClC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,wBAAwB,EAAE;IAC1E,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,kBAAkB,EAAE;IACjE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,8BAA8B,EAAE;IAC7E,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,iBAAiB;QAC5B,OAAO,EAAE,+BAA+B;KACzC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,WAAW;QACtB,OAAO,EAAE,8BAA8B;KACxC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,uBAAuB,EAAE;IACzE,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,8BAA8B;KACxC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,6BAA6B,EAAE;IAC5E,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,wBAAwB,EAAE;IAC1E,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,2BAA2B,EAAE;IAC1E,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,WAAW;QACtB,OAAO,EAAE,8BAA8B;KACxC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,WAAW;QACtB,OAAO,EAAE,0BAA0B;KACpC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,wBAAwB,EAAE;IAC1E,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,oBAAoB,EAAE;IACzE,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,8BAA8B;KACxC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,0BAA0B,EAAE;IACzE,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,cAAc;QACzB,OAAO,EAAE,sBAAsB;KAChC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,iBAAiB;QAC5B,OAAO,EAAE,0BAA0B;KACpC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,oBAAoB,EAAE;IACzE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,oBAAoB,EAAE;IACzE,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,cAAc;QACzB,OAAO,EAAE,6BAA6B;KACvC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,wBAAwB,EAAE;IAC7E,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,wBAAwB,EAAE;IAC1E,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,yBAAyB,EAAE;IAC3E,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,oBAAoB,EAAE;IACzE,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,WAAW;QACtB,OAAO,EAAE,6BAA6B;KACvC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,8BAA8B;KACxC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,uBAAuB,EAAE;IACzE,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,iBAAiB;QAC5B,OAAO,EAAE,8BAA8B;KACxC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,wBAAwB,EAAE;IAC7E,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,WAAW;QACtB,OAAO,EAAE,yBAAyB;KACnC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,cAAc;QACzB,OAAO,EAAE,4BAA4B;KACtC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,cAAc;QACzB,OAAO,EAAE,6BAA6B;KACvC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,WAAW;QACtB,OAAO,EAAE,yBAAyB;KACnC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,4BAA4B,EAAE;IAC3E,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,gCAAgC;KAC1C;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,gCAAgC;KAC1C;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,sBAAsB,EAAE;IACxE,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,8BAA8B;KACxC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,kCAAkC;KAC5C;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,uBAAuB,EAAE;IACzE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,sBAAsB,EAAE;IACxE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,sBAAsB,EAAE;IACxE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,uBAAuB,EAAE;IACzE,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,cAAc;QACzB,OAAO,EAAE,6BAA6B;KACvC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,0BAA0B,EAAE;IAC5E,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,wBAAwB,EAAE;IAC7E,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,6BAA6B,EAAE;IAC5E,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,qBAAqB,EAAE;IAC1E,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,8BAA8B;KACxC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,cAAc;QACzB,OAAO,EAAE,6BAA6B;KACvC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,WAAW;QACtB,OAAO,EAAE,iCAAiC;KAC3C;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,oBAAoB;QAC/B,OAAO,EAAE,gCAAgC;KAC1C;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,2BAA2B,EAAE;IAC1E,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,oBAAoB,EAAE;IACtE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,iBAAiB,EAAE;IACtE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,0BAA0B,EAAE;IAC5E,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,8BAA8B;KACxC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,+BAA+B;KACzC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,cAAc;QACzB,OAAO,EAAE,2BAA2B;KACrC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,+BAA+B;KACzC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,0BAA0B,EAAE;IAC5E,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,wBAAwB,EAAE;IAC7E,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,0BAA0B,EAAE;IAC5E,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,cAAc;QACzB,OAAO,EAAE,iCAAiC;KAC3C;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,WAAW;QACtB,OAAO,EAAE,0BAA0B;KACpC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,qBAAqB,EAAE;IAC1E,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,WAAW;QACtB,OAAO,EAAE,0BAA0B;KACpC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,cAAc;QACzB,OAAO,EAAE,6BAA6B;KACvC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,8BAA8B;KACxC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,WAAW;QACtB,OAAO,EAAE,2BAA2B;KACrC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,8BAA8B;KACxC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,WAAW;QACtB,OAAO,EAAE,yBAAyB;KACnC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,cAAc;QACzB,OAAO,EAAE,0BAA0B;KACpC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,WAAW;QACtB,OAAO,EAAE,4BAA4B;KACtC;IACD,EAAE,EAAE;QACF,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,KAAK;QAChB,OAAO,EAAE,+BAA+B;KACzC;IACD,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,wBAAwB,EAAE;IACvE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,0BAA0B,EAAE;IAC5E,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,sBAAsB,EAAE;CAC5E,CAAC;AAEF,MAAM,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAC5B,MAAM,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAE5B,SAAS,cAAc,CAAC,SAAiB;;IAEvC,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,UAAU,KAAa;;QAElE,IAAI,MAAM,CAAC;QACX,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAClC,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAE7C,QAAQ,OAAO;YACb,KAAK,GAAG;gBACN,MAAM,GAAG,WAAW,CAAC;gBACrB,MAAM;YACR,KAAK,GAAG;gBACN,MAAM,GAAG,QAAQ,CAAC;gBAClB,MAAM;YACR,KAAK,GAAG;gBACN,MAAM,GAAG,QAAQ,CAAC;gBAClB,MAAM;YACR,KAAK,GAAG;gBACN,MAAM,GAAG,KAAK,CAAC;gBACf,MAAM;YACR,KAAK,GAAG;gBACN,MAAM,GAAG,KAAK,CAAC;gBACf,MAAM;YACR,KAAK,GAAG;gBACN,MAAM,GAAG,KAAK,CAAC;gBACf,MAAM;YACR,KAAK,GAAG;gBACN,MAAM,GAAG,QAAQ,CAAC;gBAClB,MAAM;SACT;QAED,OAAO,IAAI,GAAG,MAAM,GAAG,IAAI,GAAG,OAAO,GAAG,IAAI,CAAC;KAC9C,CAAC,CAAC;IAEH,OAAO,IAAI,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC;AAChD,CAAC;AAED;;;;;AAKA,SAAS,eAAe,CAAC,IAAY;IACnC,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAC1B,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAE1C,OAAO,IAAI;SACR,KAAK,CAAC,EAAE,CAAC;SACT,GAAG,CAAC,UAAU,CAAC;QACd,MAAM,IAAI,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;;YAE1B,OAAO,IAAI,GAAG,CAAC,GAAG,EAAE,CAAC;SACtB;aAAM;YACL,OAAO,CAAC,CAAC;SACV;KACF,CAAC;SACD,IAAI,CAAC,EAAE,CAAC,CAAC;AACd,CAAC;AAED;;;;;;AAMA,SAAS,eAAe,CAAC,IAAY;IACnC,IAAI,SAAS,GAAG,IAAI,CAAC;IACrB,IAAI,KAAK,CAAC;IAEV,OAAO,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3B,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,SAAS,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,EAAE,IAAI,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KACxE;IAED,OAAO,QAAQ,CAAC,SAAS,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;AACtC,CAAC;AAED,SAAS,SAAS,CAChB,IAAY,EACZ,WAAmB,EACnB,SAAwB;IAExB,QACE,SAAS,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM;QAChC,WAAW,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QAChC,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACvD,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAC5C;AACJ,CAAC;AAED,SAASD,UAAQ,CAAC,IAAY;IAC5B,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAC1B,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACrC,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,WAAW,CAAC,CAAC;IAC1D,OAAO,CAAC,CAAC,gBAAgB,IAAI,SAAS,CAAC,IAAI,EAAE,WAAW,EAAE,gBAAgB,CAAC,CAAC;AAC9E,CAAC;AAED,aAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,MAAM;IACZ,WAAW,EAAE,sIAAsI;IACnJ,SAAS,CAAC,KAAK;QACb,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;SACtD;QAED,IAAI,CAACA,UAAQ,CAAC,KAAK,CAAC,EAAE;YACpB,MAAM,IAAI,SAAS,CAAC,8BAA8B,KAAK,EAAE,CAAC,CAAC;SAC5D;QAED,OAAO,KAAK,CAAC;KACd;IAED,UAAU,CAAC,KAAK;QACd,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;SACtD;QAED,IAAI,CAACA,UAAQ,CAAC,KAAK,CAAC,EAAE;YACpB,MAAM,IAAI,SAAS,CAAC,8BAA8B,KAAK,EAAE,CAAC,CAAC;SAC5D;QAED,OAAO,KAAK,CAAC;KACd;IAED,YAAY,CAAC,GAAG;QACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC5B,MAAM,IAAI,YAAY,CACpB,iDAAiD,GAAG,CAAC,IAAI,EAAE,CAC5D,CAAC;SACH;QAED,IAAI,CAACA,UAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACxB,MAAM,IAAI,SAAS,CAAC,8BAA8B,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;SAChE;QAED,OAAO,GAAG,CAAC,KAAK,CAAC;KAClB;CACF,CAAC;;AC7aF,MAAM,sBAAsB,GAAG,IAAI,MAAM,CAAC,mBAAmB,CAAC,CAAC;AAE/D,iBAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,UAAU;IAEhB,WAAW,EACT,4LAA4L;IAE9L,SAAS,CAAC,KAAa;QACrB,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACvC,MAAM,IAAI,SAAS,CACjB,mDAAmD,KAAK,EAAE,CAC3D,CAAC;SACH;QAED,OAAO,KAAK,CAAC;KACd;IAED,UAAU,CAAC,KAAa;QACtB,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACvC,MAAM,IAAI,SAAS,CACjB,mDAAmD,KAAK,EAAE,CAC3D,CAAC;SACH;QAED,OAAO,KAAK,CAAC;KACd;IAED,YAAY,CAAC,GAAc;QACzB,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;YAC5B,MAAM,IAAI,YAAY,CACpB,6DAA6D,GAAG,CAAC,IAAI,EAAE,CACxE,CAAC;SACH;QAED,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC3C,MAAM,IAAI,SAAS,CACjB,mDAAmD,GAAG,CAAC,KAAK,EAAE,CAC/D,CAAC;SACH;QAED,OAAO,GAAG,CAAC,KAAK,CAAC;KAClB;CACF,CAAC;;AC5CF,aAAe,IAAI,iBAAiB,CAAC;IACnC,IAAI,EAAE,MAAM;IAEZ,WAAW,EAAE,wBAAwB;IAErC,SAAS;QACP,OAAO,IAAI,CAAC;KACb;IAED,UAAU;QACR,OAAO,IAAI,CAAC;KACb;IAED,YAAY;QACV,OAAO,IAAI,CAAC;KACb;CACF,CAAC;;MCeI,cAAc,GAAG,aAAa,CAAC,QAAQ,EAAE;MACzC,YAAY,GAAG,aAAa,CAAC,MAAM,EAAE;MAErC,sBAAsB,GAAG,qBAAqB,CAAC,gBAAgB,EAAE;MACjE,mBAAmB,GAAG,qBAAqB,CAAC,aAAa,EAAE;MAE3D,wBAAwB,GAAG,uBAAuB,CAAC,kBAAkB,EAAE;MACvE,qBAAqB,GAAG,uBAAuB,CAAC,eAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCxC/D,UAAU,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE;MAC5CE,UAAQ,GAAG,MAAM,IAAI,IAAI,GAAG;MAC5BC,WAAS,GAAG,MAAM,SAAS;MAC3BC,cAAY,GAAG,MAAM,gBAAgB;MACrCC,eAAa,GAAG,MAAM,CAAC,OAAO;MAC9BC,aAAW,GAAG,MAAM,CAAC,IAAI;MACzB,gBAAgB,GAAG,MAAM,OAAO;MAChC,cAAc,GAAG,MAAM,IAAI;MAC3BC,kBAAgB,GAAG,MAAM,CAAC,OAAO;MACjCC,gBAAc,GAAG,MAAM,CAAC,IAAI;MAC5BC,aAAW,GAAG,MAAM,eAAe;MACnCC,UAAQ,GAAG,MAAM,2BAA2B;MAC5CC,eAAa,GAAG,MAAM,OAAO;MAC7BC,aAAW,GAAG,MAAM,IAAI;MACxBC,YAAU,GAAG,MAAM,QAAQ;MAClC,OAAO,GAAG,MAAM,IAAI,GAAG,CAAC,sBAAsB,EAAS;AAC7D;MACaC,MAAI,GAAG;;IAElB,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;IAC7B,IACE,OAAO,WAAW,KAAK,WAAW;QAClC,OAAO,WAAW,CAAC,GAAG,KAAK,UAAU,EACrC;QACA,CAAC,IAAI,WAAW,CAAC,GAAG,EAAE,CAAC;KACxB;IACD,OAAO,sCAAsC,CAAC,OAAO,CAAC,OAAO,EAAE,UAAU,CAAC;;QAExE,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;QAC5C,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;;QAEvB,OAAO,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;KACvD,CAAC,CAAC;AACL,EAAE;MACWC,cAAY,GAAG,MAC1B,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE;MAC7CC,aAAW,GAAG,MACzB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE;AAEpD,MAAM,SAAS,GAAG,CAAC,GAAW,EAAE,GAAW;IACzC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;AAC3D,CAAC,CAAC;AACF;MACaC,KAAG,GAAG,MACjB,OAAO,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,MAAM,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK;MAC/DC,MAAI,GAAG,MAClB,QAAQ,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,MAAM,SAAS,CAC5D,EAAE,EACF,EAAE,CACH,MAAM,IAAI,CAAC,MAAM,EAAE,IAAI;AAE1B;MACaC,MAAI,GAAG,MAClB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;IAC/B,CAAC;IACD,GAAG;KACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;IACrC,GAAG;KACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;IACrC,GAAG;KACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE;MAC3BC,MAAI,GAAG,MAAM,0CAA0C;AACpE;MACaC,KAAG,GAAG,MACjB,mBAAmB,CAAC,OAAO,CAAC,IAAI,EAAE,MAChC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,EACzD;MACSC,MAAI,GAAG,MAAM,SAAS,CAAC,CAAC,EAAE,KAAK,EAAE;MACjCC,KAAG,GAAG,MACjB,OAAO,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI;MAC7DC,MAAI,GAAG,MAClB,QAAQ,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,SAAS,CAC3D,CAAC,EACD,GAAG,CACJ,KAAK,IAAI,CAAC,MAAM,EAAE,IAAI;MACZC,MAAI,GAAG,MAAM,oBAAoB;MACjCC,YAAU,GAAG,MAAM,KAAK;MACxBzB,MAAI,GAAG,OAAO,EAAE,EAAE;MAClB0B,YAAU,GAAG,OAAO,EAAE,EAAE;MACxBC,MAAI,GAAG,MAAM,qBAAqB;MAClCC,MAAI,GAAG,MAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MChFnBC,QAAM,GAAG,gBAAgB;MACzB5B,UAAQ,GAAG,kBAAkB;MAC7BC,WAAS,GAAG,mBAAmB;MAC/BC,cAAY,GAAG,sBAAsB;MACrCU,MAAI,GAAG,cAAc;MACrBE,aAAW,GAAG,qBAAqB;MACnCD,cAAY,GAAG,sBAAsB;MACrCE,KAAG,GAAG,aAAa;MACnBC,MAAI,GAAG,cAAc;MACrBU,MAAI,GAAG,cAAc;MACrBT,MAAI,GAAG,cAAc;MACrBC,MAAI,GAAG,cAAc;MACrBK,MAAI,GAAG,cAAc;MACrBxB,MAAI,GAAG,cAAc;MACrB0B,YAAU,GAAG,oBAAoB;MACjCN,KAAG,GAAG,aAAa;MACnBhB,eAAa,GAAG,uBAAuB;MACvCC,aAAW,GAAG,qBAAqB;MACnCyB,kBAAgB,GAAG,0BAA0B;MAC7CC,gBAAc,GAAG,wBAAwB;MACzCzB,kBAAgB,GAAG,0BAA0B;MAC7CC,gBAAc,GAAG,wBAAwB;MACzCC,aAAW,GAAG,qBAAqB;MACnCa,MAAI,GAAG,cAAc;MACrBX,eAAa,GAAG,uBAAuB;MACvCC,aAAW,GAAG,qBAAqB;MACnCC,YAAU,GAAG,oBAAoB;MACjCU,KAAG,GAAG,aAAa;MACnBC,MAAI,GAAG,cAAc;MACrBS,KAAG,GAAG,aAAa;MACnBP,YAAU,GAAG,oBAAoB;MAEjC,aAAa,GAAG,uBAAuB;MACvC,WAAW,GAAG,qBAAqB;MACnC,IAAI,GAAG,cAAc;MACrBhB,UAAQ,GAAG,kBAAkB;MAE7BmB,MAAI,GAAG,cAAc;AAElC,iBAAe;IACb3B,UAAQ;IACRC,WAAS;IACTC,cAAY;IACZC,eAAa;IACbC,aAAW;IACXyB,kBAAgB;IAChBC,gBAAc;IACdzB,kBAAgB;IAChBC,gBAAc;IACdC,aAAW;IACXE,eAAa;IACbC,aAAW;IACXC,YAAU;IACV,aAAa;IACb,WAAW;IACXoB,KAAG;IACHH,QAAM;IACN,IAAI;IACJhB,MAAI;IACJE,aAAW;IACXD,cAAY;IACZE,KAAG;IACHC,MAAI;IACJC,MAAI;IACJC,MAAI;IACJK,MAAI;IACJJ,KAAG;IACHC,MAAI;IACJC,KAAG;IACHC,MAAI;IACJE,YAAU;IACVzB,MAAI;IACJ0B,YAAU;IACVC,MAAI;IACJlB,UAAQ;IACRmB,MAAI;CACL;;MCpEoB,iBAAkB,SAAQ,iBAAiB;IAC9D,YACE,IAAY,EACZ,KAAa,EACb,UAAoC,EAAE;QAEtC,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;QAChC,MAAM,YAAY,GAAoC,OAAO,CAAC,YAAY;cACtE,OAAO,CAAC,YAAY;cACpB,CAAC,CAAC,EAAE,CAAC,KAAK,+CAA+C,CAAC,KAAK,CAAC,EAAE,CAAC;QACvE,KAAK,CAAC;YACJ,IAAI;YAEJ,WAAW,EAAE,+DAA+D,KAAK,GAAG;YAEpF,SAAS,CAAC,KAAK;gBACb,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC7B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;iBACtD;gBAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;oBACtB,MAAM,IAAI,SAAS,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;iBACjD;gBAED,OAAO,KAAK,CAAC;aACd;YAED,UAAU,CAAC,KAAK;gBACd,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC7B,MAAM,IAAI,SAAS,CAAC,wBAAwB,KAAK,EAAE,CAAC,CAAC;iBACtD;gBAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;oBACtB,MAAM,IAAI,SAAS,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;iBACjD;gBAED,OAAO,KAAK,CAAC;aACd;YAED,YAAY,CAAC,GAAG;gBACd,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;oBAC5B,MAAM,IAAI,YAAY,CACpB,+DACA,GAAG,CAAC,IACJ,EAAE,CACH,CAAC;iBACH;gBAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;oBAC1B,MAAM,IAAI,SAAS,CAAC,YAAY,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;iBACrD;gBAED,OAAO,GAAG,CAAC,KAAK,CAAC;aAClB;SACF,CAAC,CAAC;KACJ;;;;;"}